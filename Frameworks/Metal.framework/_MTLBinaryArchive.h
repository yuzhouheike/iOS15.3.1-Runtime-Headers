/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Metal.framework/Metal
 */

@interface _MTLBinaryArchive : _MTLObjectWithLabel <MTLBinaryArchiveSPI> {
    bool  _collectArchives;
    <MTLDevice> * _device;
    NSMutableDictionary * _entries;
    NSData * _fileData;
    MTLLoadedFile * _fileMapping;
    unsigned long long  _options;
    struct unique_ptr<MTLPipelineCollection, std::default_delete<MTLPipelineCollection>> { 
        struct __compressed_pair<MTLPipelineCollection *, std::default_delete<MTLPipelineCollection>> { 
            struct MTLPipelineCollection {} *__value_; 
        } __ptr_; 
    }  _pipelineCollection;
    struct map<MTLUINT256_t, std::pair<unsigned int, unsigned long long>, CompareHash, std::allocator<std::pair<const MTLUINT256_t, std::pair<unsigned int, unsigned long long>>>> { 
        struct __tree<std::__value_type<MTLUINT256_t, std::pair<unsigned int, unsigned long long>>, std::__map_value_compare<MTLUINT256_t, std::__value_type<MTLUINT256_t, std::pair<unsigned int, unsigned long long>>, CompareHash, true>, std::allocator<std::__value_type<MTLUINT256_t, std::pair<unsigned int, unsigned long long>>>> { 
            void *__begin_node_; 
            struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<MTLUINT256_t, std::pair<unsigned int, unsigned long long>>, void *>>> { 
                struct __tree_end_node<std::__tree_node_base<void *> *> { 
                    void *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__map_value_compare<MTLUINT256_t, std::__value_type<MTLUINT256_t, std::pair<unsigned int, unsigned long long>>, CompareHash, true>> { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _pipelineFileIndex;
    NSObject<OS_dispatch_queue> * _queue;
    unsigned long long  _recompilationArchiveBytes;
    struct map<MTLUINT256_t, std::pair<unsigned int, unsigned long long>, CompareHash, std::allocator<std::pair<const MTLUINT256_t, std::pair<unsigned int, unsigned long long>>>> { 
        struct __tree<std::__value_type<MTLUINT256_t, std::pair<unsigned int, unsigned long long>>, std::__map_value_compare<MTLUINT256_t, std::__value_type<MTLUINT256_t, std::pair<unsigned int, unsigned long long>>, CompareHash, true>, std::allocator<std::__value_type<MTLUINT256_t, std::pair<unsigned int, unsigned long long>>>> { 
            void *__begin_node_; 
            struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<MTLUINT256_t, std::pair<unsigned int, unsigned long long>>, void *>>> { 
                struct __tree_end_node<std::__tree_node_base<void *> *> { 
                    void *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__map_value_compare<MTLUINT256_t, std::__value_type<MTLUINT256_t, std::pair<unsigned int, unsigned long long>>, CompareHash, true>> { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _recompilationArchiveFileIndex;
    unsigned long long  _recompilationArchiveOffset;
    unsigned long long  _specializedFunctionArchiveBytes;
    struct map<MTLUINT256_t, std::pair<unsigned int, unsigned long long>, CompareHash, std::allocator<std::pair<const MTLUINT256_t, std::pair<unsigned int, unsigned long long>>>> { 
        struct __tree<std::__value_type<MTLUINT256_t, std::pair<unsigned int, unsigned long long>>, std::__map_value_compare<MTLUINT256_t, std::__value_type<MTLUINT256_t, std::pair<unsigned int, unsigned long long>>, CompareHash, true>, std::allocator<std::__value_type<MTLUINT256_t, std::pair<unsigned int, unsigned long long>>>> { 
            void *__begin_node_; 
            struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<MTLUINT256_t, std::pair<unsigned int, unsigned long long>>, void *>>> { 
                struct __tree_end_node<std::__tree_node_base<void *> *> { 
                    void *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__map_value_compare<MTLUINT256_t, std::__value_type<MTLUINT256_t, std::pair<unsigned int, unsigned long long>>, CompareHash, true>> { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _specializedFunctionArchiveFileIndex;
    unsigned long long  _specializedFunctionArchiveOffset;
    struct unordered_map<MTLUINT256_t, NSObject<OS_dispatch_data> *, UnorderedContainerHash, UnorderedContainerHash, std::allocator<std::pair<const MTLUINT256_t, NSObject<OS_dispatch_data> *>>> { 
        struct __hash_table<std::__hash_value_type<MTLUINT256_t, NSObject<OS_dispatch_data> *>, std::__unordered_map_hasher<MTLUINT256_t, std::__hash_value_type<MTLUINT256_t, NSObject<OS_dispatch_data> *>, UnorderedContainerHash, UnorderedContainerHash, true>, std::__unordered_map_equal<MTLUINT256_t, std::__hash_value_type<MTLUINT256_t, NSObject<OS_dispatch_data> *>, UnorderedContainerHash, UnorderedContainerHash, true>, std::allocator<std::__hash_value_type<MTLUINT256_t, NSObject<OS_dispatch_data> *>>> { 
            struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, NSObject<OS_dispatch_data> *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, NSObject<OS_dispatch_data> *>, void *> *> *>>> { 
                struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, NSObject<OS_dispatch_data> *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, NSObject<OS_dispatch_data> *>, void *> *> *>>> { 
                    void **__value_; 
                    struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, NSObject<OS_dispatch_data> *>, void *> *> *>> { 
                        struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, NSObject<OS_dispatch_data> *>, void *> *> *>> { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, NSObject<OS_dispatch_data> *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<MTLUINT256_t, NSObject<OS_dispatch_data> *>, void *>>> { 
                struct __hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, NSObject<OS_dispatch_data> *>, void *> *> { 
                    void *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__unordered_map_hasher<MTLUINT256_t, std::__hash_value_type<MTLUINT256_t, NSObject<OS_dispatch_data> *>, UnorderedContainerHash, UnorderedContainerHash, true>> { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__unordered_map_equal<MTLUINT256_t, std::__hash_value_type<MTLUINT256_t, NSObject<OS_dispatch_data> *>, UnorderedContainerHash, UnorderedContainerHash, true>> { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  _specializedFunctions;
    struct unordered_map<MTLUINT256_t, MTLProgramObject *, UnorderedContainerHash, UnorderedContainerHash, std::allocator<std::pair<const MTLUINT256_t, MTLProgramObject *>>> { 
        struct __hash_table<std::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, std::__unordered_map_hasher<MTLUINT256_t, std::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, UnorderedContainerHash, UnorderedContainerHash, true>, std::__unordered_map_equal<MTLUINT256_t, std::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, UnorderedContainerHash, UnorderedContainerHash, true>, std::allocator<std::__hash_value_type<MTLUINT256_t, MTLProgramObject *>>> { 
            struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *> *> *>>> { 
                struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *> *> *>>> { 
                    void **__value_; 
                    struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *> *> *>> { 
                        struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *> *> *>> { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *>>> { 
                struct __hash_node_base<std::__hash_node<std::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *> *> { 
                    void *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__unordered_map_hasher<MTLUINT256_t, std::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, UnorderedContainerHash, UnorderedContainerHash, true>> { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__unordered_map_equal<MTLUINT256_t, std::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, UnorderedContainerHash, UnorderedContainerHash, true>> { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  _variantMap;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) <MTLDevice> *device;
@property (readonly) unsigned long long hash;
@property (readonly) NSArray *keys;
@property (copy) NSString *label;
@property (readonly) unsigned long long options;
@property (readonly) Class superclass;

+ (id)descriptorDataForArchive:(id)arg1;
+ (bool)deserializeBinaryArchiveDescriptorMachO:(struct { bool x1; bool x2; unsigned long long x3; unsigned long long x4; bool x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; bool x10; unsigned long long x11; unsigned long long x12; }*)arg1 fileData:(id)arg2;
+ (bool)deserializeBinaryArchiveHeader:(struct { bool x1; bool x2; unsigned long long x3; unsigned long long x4; bool x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; bool x10; unsigned long long x11; unsigned long long x12; }*)arg1 fileData:(id)arg2 device:(id)arg3;
+ (struct MTLLoaderSliceIdentifier { int x1; int x2; })sliceIDForSpecializedFunctions;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)addArchiveEntry:(id)arg1 forKey:(const struct { unsigned char x1[32]; }*)arg2;
- (void)addBinaryEntry:(id)arg1 forKey:(id)arg2;
- (bool)addComputePipelineFunctionsWithDescriptor:(id)arg1 error:(id*)arg2;
- (bool)addComputePipelineFunctionsWithDescriptor:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
- (bool)addFunctionWithDescriptor:(id)arg1 library:(id)arg2 error:(id*)arg3;
- (bool)addLibraryWithDescriptor:(id)arg1 error:(id*)arg2;
- (bool)addRenderPipelineFunctionsWithDescriptor:(id)arg1 error:(id*)arg2;
- (bool)addRenderPipelineFunctionsWithDescriptor:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
- (bool)addTileRenderPipelineFunctionsWithDescriptor:(id)arg1 error:(id*)arg2;
- (bool)addTileRenderPipelineFunctionsWithDescriptor:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
- (void)dealloc;
- (id)description;
- (id)device;
- (bool)enumerateArchivesFromBackingFile:(id /* block */)arg1;
- (bool)enumerateArchivesFromBackingFileFromSlice:(const struct MTLLoaderSliceIdentifier { int x1; int x2; }*)arg1 version:(unsigned long long)arg2 verifyKey:(const struct { unsigned char x1[32]; }*)arg3 offset:(unsigned long long)arg4 bytes:(unsigned long long)arg5 enumerator:(id /* block */)arg6;
- (bool)enumerateArchivesFromPipelineCollection:(id /* block */)arg1;
- (bool)enumerateSpecializedFunctionArchivesFromBackingFile:(id /* block */)arg1;
- (void*)findProgramObjectForFunction:(const struct { unsigned char x1[32]; }*)arg1;
- (id)formattedDescription:(unsigned long long)arg1;
- (id)getArchiveDataForKey:(const struct { unsigned char x1[32]; }*)arg1;
- (id)getBinaryDataForKey:(id)arg1;
- (bool)getSpecializedFunctionArchivesToSerialize:(void*)arg1;
- (id)initWithDevice:(id)arg1 descriptor:(id)arg2 error:(id*)arg3;
- (id)initWithOptions:(unsigned long long)arg1 device:(id)arg2 url:(id)arg3 error:(id*)arg4;
- (id)keys;
- (bool)loadFileIndex:(void*)arg1 expectedSliceId:(const struct MTLLoaderSliceIdentifier { int x1; int x2; }*)arg2 expectedVersion:(unsigned long long)arg3 sliceOffset:(unsigned long long)arg4;
- (void)materializeAll;
- (id)materializeEntryForKey:(const struct { unsigned char x1[32]; }*)arg1 fileIndex:(void*)arg2 containsEntry:(id /* block */)arg3 addEntry:(id /* block */)arg4;
- (id)materializeFromFileOffset:(unsigned long long)arg1 hash:(struct { unsigned char x1[32]; }*)arg2;
- (id)materializeFromHash:(struct { unsigned char x1[32]; }*)arg1 fileIndex:(void*)arg2;
- (unsigned long long)options;
- (void*)pipelineCollection;
- (void*)programObjectForFunction:(const struct { unsigned char x1[32]; }*)arg1;
- (bool)removeComputePipelineFunctionsWithDescriptor:(id)arg1 error:(id*)arg2;
- (bool)serializeToURL:(id)arg1 error:(id*)arg2;
- (bool)serializeToURL:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
- (bool)storeComputePipelineDescriptor:(id)arg1;
- (bool)storeRenderPipelineDescriptor:(id)arg1;
- (bool)storeTileRenderPipelineDescriptor:(id)arg1;

@end
