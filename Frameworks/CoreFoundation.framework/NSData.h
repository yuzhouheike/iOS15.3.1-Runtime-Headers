/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 */

@interface NSData : NSObject <AFContextSnapshot, AFSecurityDigestibleChunksProviding, CARPFObject, CKPropertiesDescription, CKRecordValue, CUByteCodable, INJSONSerializable, NSCopying, NSMutableCopying, NSSecureCoding, PQLValuable, _PASDistilledString>

@property (nonatomic, readonly) NSData *NRSHA256;
@property (nonatomic, readonly) NSData *SHA1Data;
@property (nonatomic, readonly) NSString *SHA1HexString;
@property (nonatomic, readonly) NSData *SHA256Data;
@property (nonatomic, readonly) NSData *ams_SHA1;
@property (nonatomic, readonly) NSData *ams_compressedData;
@property (nonatomic, readonly) NSData *ams_decompressedData;
@property (nonatomic, readonly) NSString *ams_hexAddressDescription;
@property (nonatomic, readonly) NSString *ams_nvramDescription;
@property (nonatomic, readonly, copy) NSArray *attributeDescriptions;
@property (readonly) const void*bytes;
@property (readonly) NSString *carpf_hexadecimalRepresentation;
@property (readonly, copy) NSString *carpf_privateDescription;
@property (readonly, copy) NSString *carpf_shortDescription;
@property (getter=carpf_isZeroed, readonly) bool carpf_zeroed;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) unsigned long long length;
@property (readonly, copy) NSString *propertyDescription;
@property (readonly) Class superclass;
@property (getter=_navigation_unsignedIntegerValue, nonatomic, readonly) unsigned long long unsignedIntegerValue;

// Image: /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation

+ (bool)supportsSecureCoding;

// Image: /Developer/Library/PrivateFrameworks/DebugHierarchyFoundation.framework/DebugHierarchyFoundation

- (id)dbg_gzipDeflate;
- (id)dbg_gzipDeflateRaw;
- (id)dbg_gzipDeflateWithLevel:(int)arg1 windowBits:(int)arg2 memLevel:(int)arg3;
- (id)dbg_gzipInflate;
- (id)dbg_gzipInflateIfCompressed;
- (id)dbg_gzipInflateRaw;
- (id)dbg_gzipInflateWithWindowBits:(int)arg1;
- (bool)dbg_isGzipped;

// Image: /System/Library/Frameworks/CFNetwork.framework/CFNetwork

- (bool)_isSafeResumeDataForBackgroundDownload;
- (id)_requestFromResumeData;

// Image: /System/Library/Frameworks/CloudKit.framework/CloudKit

+ (id)CKDataFromBase64URLSafeString:(id)arg1;
+ (id)CKDataWithHexString:(id)arg1;
+ (id)CKDataWithHexString:(id)arg1 stringIsUppercase:(bool)arg2;

- (id)CKBase64URLSafeString;
- (void)CKDescribePropertiesUsing:(id)arg1;
- (id)CKDescriptionPropertiesWithPublic:(bool)arg1 private:(bool)arg2 shouldExpand:(bool)arg3;
- (id)CKHashedDescription;
- (id)CKHexString;
- (id)CKLowercaseHexStringWithoutSpaces;
- (id)CKSHA256;
- (id)CKUppercaseHexStringWithoutSpaces;
- (void)ck_bindInStatement:(id)arg1 atIndex:(unsigned long long)arg2;

// Image: /System/Library/Frameworks/FileProvider.framework/FileProvider

+ (id)fp_dataWithFavoriteRank:(id)arg1;
+ (id)fp_dataWithLastUsedDate:(id)arg1;

- (id)fp_favoriteRank;
- (id)fp_lastUsedDate;
- (bool)getFileIDFromXattr:(unsigned long long*)arg1 docID:(unsigned int*)arg2 genCount:(unsigned long long*)arg3;

// Image: /System/Library/Frameworks/Foundation.framework/Foundation

+ (id)_alloc;
+ (bool)_base64DecodingAlwaysSucceedsForOptions:(unsigned long long)arg1;
+ (id)_newZeroingDataWithBytes:(const void*)arg1 length:(unsigned long long)arg2;
+ (id)_newZeroingDataWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2 deallocator:(id /* block */)arg3;
+ (bool)_subclassesMustBeExplicitlyMentionedWhenDecoded;
+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (id)data;
+ (id)dataWithBytes:(const void*)arg1 length:(unsigned long long)arg2;
+ (id)dataWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2;
+ (id)dataWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2 freeWhenDone:(bool)arg3;
+ (id)dataWithContentsOfFile:(id)arg1;
+ (id)dataWithContentsOfFile:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
+ (id)dataWithContentsOfMappedFile:(id)arg1;
+ (id)dataWithContentsOfURL:(id)arg1;
+ (id)dataWithContentsOfURL:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
+ (id)dataWithContentsOfURL:(id)arg1 options:(unsigned long long)arg2 maxLength:(unsigned long long)arg3 error:(id*)arg4;
+ (id)dataWithData:(id)arg1;

- (bool)_allowsDirectEncoding;
- (id)_asciiDescription;
- (id)_base64EncodingAsString:(bool)arg1 withOptions:(unsigned long long)arg2;
- (bool)_canReplaceWithDispatchDataForXPCCoder;
- (unsigned long long)_cfTypeID;
- (id)_compressedDataUsingCompressionAlgorithm:(int)arg1 error:(id*)arg2;
- (bool)_copyWillRetain;
- (id)_createDispatchData;
- (id)_dataWithCompressionOperation:(int)arg1 algorithm:(int)arg2;
- (bool)_decodeBase64EncodedCharacterBuffer:(const char *)arg1 length:(unsigned long long)arg2 options:(unsigned long long)arg3 buffer:(char *)arg4 bufferLength:(unsigned long long)arg5 state:(struct { bool x1; bool x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned int x6; }*)arg6;
- (id)_decompressedDataUsingCompressionAlgorithm:(int)arg1 error:(id*)arg2;
- (id)_initWithBase64EncodedObject:(id)arg1 options:(unsigned long long)arg2;
- (bool)_isCompact;
- (bool)_isDispatchData;
- (bool)_providesConcreteBacking;
- (id)_replaceCString:(const char *)arg1 withCString:(const char *)arg2;
- (id)_web_guessedMIMEType;
- (id)_web_guessedMIMETypeForExtension:(id)arg1;
- (id)_web_guessedMIMETypeForXML;
- (id)_web_parseRFC822HeaderFields;
- (id)base64EncodedDataWithOptions:(unsigned long long)arg1;
- (id)base64EncodedStringWithOptions:(unsigned long long)arg1;
- (id)base64Encoding;
- (const void*)bytes;
- (Class)classForCoder;
- (id)compressedDataUsingAlgorithm:(long long)arg1 error:(id*)arg2;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)debugDescription;
- (id)decompressedDataUsingAlgorithm:(long long)arg1 error:(id*)arg2;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (void)enumerateByteRangesUsingBlock:(id /* block */)arg1;
- (void)getBytes:(void*)arg1;
- (void)getBytes:(void*)arg1 length:(unsigned long long)arg2;
- (void)getBytes:(void*)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (unsigned long long)hash;
- (id)initWithBase64EncodedData:(id)arg1 options:(unsigned long long)arg2;
- (id)initWithBase64EncodedString:(id)arg1 options:(unsigned long long)arg2;
- (id)initWithBase64Encoding:(id)arg1;
- (id)initWithBytes:(const void*)arg1 length:(unsigned long long)arg2;
- (id)initWithBytes:(void*)arg1 length:(unsigned long long)arg2 copy:(bool)arg3 deallocator:(id /* block */)arg4;
- (id)initWithBytes:(void*)arg1 length:(unsigned long long)arg2 copy:(bool)arg3 freeWhenDone:(bool)arg4 bytesAreVM:(bool)arg5;
- (id)initWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2;
- (id)initWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2 deallocator:(id /* block */)arg3;
- (id)initWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2 freeWhenDone:(bool)arg3;
- (id)initWithCoder:(id)arg1;
- (id)initWithContentsOfFile:(id)arg1;
- (id)initWithContentsOfFile:(id)arg1 error:(id*)arg2;
- (id)initWithContentsOfFile:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
- (id)initWithContentsOfFile:(id)arg1 options:(unsigned long long)arg2 maxLength:(unsigned long long)arg3 error:(id*)arg4;
- (id)initWithContentsOfMappedFile:(id)arg1;
- (id)initWithContentsOfMappedFile:(id)arg1 error:(id*)arg2;
- (id)initWithContentsOfURL:(id)arg1;
- (id)initWithContentsOfURL:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
- (id)initWithContentsOfURL:(id)arg1 options:(unsigned long long)arg2 maxLength:(unsigned long long)arg3 error:(id*)arg4;
- (id)initWithData:(id)arg1;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToData:(id)arg1;
- (bool)isNSData__;
- (unsigned long long)length;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfData:(id)arg1 options:(unsigned long long)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (id)replacementObjectForCoder:(id)arg1;
- (id)replacementObjectForPortCoder:(id)arg1;
- (id)subdataWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (bool)writeToFile:(id)arg1 atomically:(bool)arg2;
- (bool)writeToFile:(id)arg1 atomically:(bool)arg2 error:(id*)arg3;
- (bool)writeToFile:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
- (bool)writeToURL:(id)arg1 atomically:(bool)arg2;
- (bool)writeToURL:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;

// Image: /System/Library/Frameworks/Intents.framework/Intents

+ (id)_intents_decodeWithJSONDecoder:(id)arg1 codableDescription:(id)arg2 from:(id)arg3;

- (id)_in_writeDataToPathForImage:(id)arg1 storeType:(unsigned long long)arg2 error:(id*)arg3;
- (id)_intents_encodeWithJSONEncoder:(id)arg1 codableDescription:(id)arg2;
- (id)_intents_readableTitleWithLocalizer:(id)arg1 metadata:(id)arg2;

// Image: /System/Library/Frameworks/QuartzCore.framework/QuartzCore

- (id)CAMLType;
- (void)encodeWithCAMLWriter:(id)arg1;

// Image: /System/Library/Frameworks/SceneKit.framework/SceneKit

- (id)_operateOnDataUsingCompressionAlgorithm:(int)arg1 operation:(int)arg2;
- (id)scn_compressedDataUsingCompressionAlgorithm:(int)arg1;
- (id)scn_indexedDataDecodingDeltaWithBytesPerIndex:(unsigned long long)arg1;
- (id)scn_indexedDataDecodingHighWatermarkWithBytesPerIndex:(unsigned long long)arg1;
- (id)scn_indexedDataDecodingTrianglePairsWithBytesPerIndex:(unsigned long long)arg1;
- (id)scn_indexedDataEncodingDeltaWithBytesPerIndex:(unsigned long long)arg1;
- (id)scn_indexedDataEncodingHighWatermarkWithBytesPerIndex:(unsigned long long)arg1;
- (id)scn_indexedDataEncodingTrianglePairsWithBytesPerIndex:(unsigned long long)arg1;
- (id)scn_uncompressedDataUsingCompressionAlgorithm:(int)arg1;

// Image: /System/Library/Frameworks/Security.framework/Security

+ (id)CKDataWithHexString:(id)arg1;
+ (id)CKDataWithHexString:(id)arg1 stringIsUppercase:(bool)arg2;

- (id)CKHexString;
- (id)CKLowercaseHexStringWithoutSpaces;
- (id)CKUppercaseHexStringWithoutSpaces;

// Image: /System/Library/PrivateFrameworks/AddressBookLegacy.framework/AddressBookLegacy

- (id)abDecodeVCardBase64;
- (id)abDecodedUTF7;
- (id)abEncodeVCardBase64DataWithInitialLength:(unsigned long long)arg1;
- (bool)abIsUTF16EntourageVCard;
- (id)abStringAtRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 inEncoding:(unsigned long long)arg2;

// Image: /System/Library/PrivateFrameworks/AppleAccount.framework/AppleAccount

- (id)aa_compressedData:(int)arg1;
- (id)aa_hexString;

// Image: /System/Library/PrivateFrameworks/AppleMediaServices.framework/AppleMediaServices

+ (id)_AESKeyForDataProtectionClass:(unsigned long long)arg1 error:(id*)arg2;
+ (const struct __CFString { }*)_accessibleAttributeForDataProtectionClass:(unsigned long long)arg1;
+ (id)_generateInitializationVectorDataWithError:(id*)arg1;
+ (id)_labelForDataProtectionClass:(unsigned long long)arg1;
+ (id)ams_generateEncryptionKey;

- (id)_compressGZIP;
- (id)_compressLZMA;
- (id)_decompressGZIP;
- (id)_decompressLZMA;
- (id)ams_SHA1;
- (id)ams_compressWithAlgorithm:(long long)arg1;
- (id)ams_compressedData;
- (id)ams_decompressWithAlgorithm:(long long)arg1;
- (id)ams_decompressedData;
- (id)ams_decryptUsingDataProtectionClass:(unsigned long long)arg1 initializationVectorData:(id)arg2 tagData:(id)arg3 error:(id*)arg4;
- (id)ams_decryptUsingKey:(id)arg1 initializationVectorData:(id)arg2 tagData:(id)arg3 error:(id*)arg4;
- (struct { id x1; id x2; id x3; })ams_encryptDataUsingDataProtectionClass:(unsigned long long)arg1 error:(id*)arg2;
- (struct { id x1; id x2; id x3; })ams_encryptDataUsingKey:(id)arg1 error:(id*)arg2;
- (id)ams_hexAddressDescription;
- (id)ams_nvramDescription;

// Image: /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices

- (void)af_enumerateDigestibleChunksWithOptions:(unsigned long long)arg1 usingBlock:(id /* block */)arg2;
- (id)initWithSerializedBackingStore:(id)arg1;
- (id)serializedBackingStore;

// Image: /System/Library/PrivateFrameworks/AuthKit.framework/AuthKit

- (id)ak_compressedData:(int)arg1;
- (id)ak_hexString;

// Image: /System/Library/PrivateFrameworks/BaseBoard.framework/BaseBoard

+ (id)bs_dataWithVMAllocatedBytes:(const void*)arg1 length:(unsigned long long)arg2;

- (void*)bs_bytesForMIG;
- (unsigned int)bs_lengthForMIG;

// Image: /System/Library/PrivateFrameworks/CARPFoundation.framework/CARPFoundation

+ (id)carpf_shortDescription;

- (id)carpf_hexadecimalRepresentation;
- (id)carpf_hexadecimalStringWithOptions:(unsigned long long)arg1;
- (id)carpf_initWithHexadecimalString:(id)arg1 options:(unsigned long long)arg2;
- (bool)carpf_isZeroed;
- (id)carpf_privateDescription;
- (id)carpf_shortDescription;

// Image: /System/Library/PrivateFrameworks/CommonUtilities.framework/CommonUtilities

- (id)_CUTCopyGzippedData;
- (id)_CUTDecompressData;
- (id)_CUTOptionallyDecompressData;
- (id)_CUTStringFromBaseData;

// Image: /System/Library/PrivateFrameworks/ContactsFoundation.framework/ContactsFoundation

+ (id)_cn_dataFromHexString:(id)arg1;

- (id)_cn_SHA1String;
- (id)_cn_SHA256HashDataWithSalt:(id)arg1;
- (bool)_cn_containsData:(id)arg1;
- (id)_cn_decodeBase64;
- (id)_cn_decodeBase64IgnoringWhitespace;
- (id)_cn_hexString;
- (id)_cn_md5Hash;
- (id)_cn_writeToURL:(id)arg1 options:(unsigned long long)arg2;

// Image: /System/Library/PrivateFrameworks/CoreRecents.framework/CoreRecents

- (id)cr_md5DigestHexString;

// Image: /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils

+ (id)createWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2 error:(id*)arg3;

- (const char *)encodedBytesAndReturnLength:(unsigned long long*)arg1 error:(id*)arg2;
- (id)encodedDataAndReturnError:(id*)arg1;

// Image: /System/Library/PrivateFrameworks/DMCUtilities.framework/DMCUtilities

+ (id)DMCDataWithCFData:(struct __CFData { }*)arg1;

- (id)DMCHexString;
- (id)DMCSHA256Hash;

// Image: /System/Library/PrivateFrameworks/FTServices.framework/FTServices

- (id)_FTCopyGzippedData;
- (id)_FTCopyOptionallyGzippedData;
- (id)_FTStringFromBaseData;

// Image: /System/Library/PrivateFrameworks/FamilyCircle.framework/FamilyCircle

- (id)_faCircularImageDataWithDiameter:(double)arg1;
- (id)_faCircularImageDataWithDiameter:(double)arg1 cropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (struct CGContext { }*)_faCreateContextWithImage:(struct CGImage { }*)arg1 crop:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 diameter:(double)arg3;
- (struct CGImage { }*)_faCreateImageRef;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_faTranformedRectForImageSize:(struct CGSize { double x1; double x2; })arg1 cropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 diameter:(double)arg3;
- (id)fa_dictionaryFromPlistData;

// Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices

+ (id)_geo_dataForHexString:(id)arg1;
+ (id)_geo_withXPCData:(id)arg1;
+ (id)dataWithCPPData:(const void*)arg1 copy:(bool)arg2;

- (id)_GEOCreateDispatchData;
- (id)_geo_MD5Hash;
- (id)_geo_SHA1Hash;
- (id)_geo_SHA256Hash;
- (id)_geo_compressedDataViaAlgo:(int)arg1;
- (id)_geo_decompressedDataViaAlgo:(int)arg1;
- (id)_geo_hexString;
- (id)_geo_newXPCData;
- (struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *x_1_4_1; unsigned long long x_1_4_2; unsigned long long x_1_4_3; } x_1_3_1; struct __short { BOOL x_2_4_1[23]; struct { unsigned char x_2_5_1; } x_2_4_2; } x_1_3_2; struct __raw { unsigned long long x_3_4_1[3]; } x_1_3_3; } x_1_2_1; } x_1_1_1; } x1; })cppData;
- (id)initWithCPPData:(const void*)arg1 copy:(bool)arg2;

// Image: /System/Library/PrivateFrameworks/IDSFoundation.framework/IDSFoundation

+ (id)_IDSDataFromBase64String:(id)arg1;

- (id)subdataWithRangeNoCopy:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)truncatedDescription;

// Image: /System/Library/PrivateFrameworks/IMFoundation.framework/IMFoundation

+ (id)__imDataWithHexString:(id)arg1;
+ (id)__imDataWithRandomBytes:(unsigned long long)arg1;
+ (id)__imHexStringOfBytes:(char *)arg1 withLength:(unsigned long long)arg2;

- (id)SHA1Data;
- (id)SHA1HexString;
- (id)SHA256Data;
- (id)_FTDecompressData;
- (id)_FTOptionallyDecompressData;
- (id)__imHexString;
- (id)__imHexStringOfBytes:(char *)arg1 withLength:(unsigned long long)arg2;

// Image: /System/Library/PrivateFrameworks/IconFoundation.framework/IconFoundation

- (struct CGImageBlockSet { }*)__IS_copyCGImageBlockSetWithProvider:(struct CGImageProvider { }*)arg1;
- (void)__IS_getImageBuffer:(void**)arg1 size:(unsigned long long*)arg2;
- (struct { unsigned int x1; float x2; float x3; unsigned int x4; unsigned int x5; float x6; float x7; unsigned char x8[4]; }*)__IS_imageHeader;

// Image: /System/Library/PrivateFrameworks/IconServices.framework/IconServices

+ (id)_ISMutableStoreIndex_mappedDataWithCapacity:(unsigned long long)arg1 additionalSize:(unsigned long long)arg2;
+ (id)_ISMutableStoreIndex_mappedDataWithSize:(unsigned long long)arg1;
+ (id)_ISMutableStoreIndex_mappedDataWithURL:(id)arg1;
+ (id)_ISStoreIndex_mappedDataWithURL:(id)arg1;
+ (id)__is__bookmarkDataWithContentsOfURL:(id)arg1;
+ (id)__is__dataWithContentsOfURL:(id)arg1;
+ (id)_is_invalidToken;
+ (id)_is_staleToken;
+ (id)_is_validToken;

- (union { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; unsigned long long x2; })_ISMutableStoreIndex_addBlobBuffer:(const void*)arg1 size:(unsigned long long)arg2;
- (union { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; unsigned long long x2; })_ISMutableStoreIndex_addBlobData:(id)arg1;
- (bool)_ISMutableStoreIndex_addValue:(const struct { unsigned char x1[16]; struct { double x_2_1_1; double x_2_1_2; } x2; double x3; unsigned int x4; unsigned char x5[16]; unsigned char x6[16]; struct { unsigned char x_7_1_1[16]; unsigned long long x_7_1_2; unsigned char x_7_1_3[16]; } x7; }*)arg1;
- (bool)_ISMutableStoreIndex_addValue:(const void*)arg1 size:(unsigned long long)arg2 forUUID:(unsigned char)arg3;
- (unsigned long long)_ISMutableStoreIndex_availableSpace;
- (bool)_ISMutableStoreIndex_makeBackedByFileAtURL:(id)arg1;
- (void)_ISMutableStoreIndex_removeBlobForID:(union { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; unsigned long long x2; })arg1;
- (union { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; unsigned long long x2; })_ISStoreIndex_addNodeWithSize:(unsigned long long)arg1;
- (id)_ISStoreIndex_blobDataForID:(union { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; unsigned long long x2; })arg1;
- (struct { union { struct { unsigned int x_1_2_1; unsigned int x_1_2_2; } x_1_1_1; unsigned long long x_1_1_2; } x1; bool x2; unsigned char x3[3]; unsigned char x4[0]; }*)_ISStoreIndex_blobForID:(union { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; unsigned long long x2; })arg1;
- (struct { unsigned int x1; bool x2; unsigned int x3; }*)_ISStoreIndex_blobTableHeader;
- (bool)_ISStoreIndex_checkNodeBounds:(struct { union { struct { unsigned int x_1_2_1; unsigned int x_1_2_2; } x_1_1_1; unsigned long long x_1_1_2; } x1; unsigned char x2[16]; union { struct { unsigned int x_1_2_1; unsigned int x_1_2_2; } x_3_1_1; unsigned long long x_3_1_2; } x3; bool x4; unsigned char x5[3]; unsigned char x6[0]; }*)arg1;
- (void)_ISStoreIndex_enumerateBlobsWithBock:(id /* block */)arg1;
- (bool)_ISStoreIndex_enumerateValuesForUUID:(unsigned char)arg1 bock:(id /* block */)arg2;
- (void)_ISStoreIndex_enumerateValuesWithBock:(id /* block */)arg1;
- (union { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; unsigned long long x2; }*)_ISStoreIndex_hashTable;
- (struct { unsigned int x1; bool x2; unsigned int x3; unsigned int x4; unsigned int x5; }*)_ISStoreIndex_hashTableHeader;
- (bool)_ISStoreIndex_isValid;
- (bool)_ISStoreIndex_isValid;
- (struct { union { struct { unsigned int x_1_2_1; unsigned int x_1_2_2; } x_1_1_1; unsigned long long x_1_1_2; } x1; unsigned char x2[16]; union { struct { unsigned int x_1_2_1; unsigned int x_1_2_2; } x_3_1_1; unsigned long long x_3_1_2; } x3; bool x4; unsigned char x5[3]; unsigned char x6[0]; }*)_ISStoreIndex_nodeForRef:(union { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; unsigned long long x2; })arg1;
- (union { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; unsigned long long x2; })_ISStoreIndex_nodeRefForKey:(unsigned long long)arg1;
- (unsigned long long)_ISStoreIndex_nodesOffset;
- (bool)_ISStoreIndex_setNodeRef:(union { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; unsigned long long x2; })arg1 forKey:(unsigned long long)arg2;
- (id)__is__bookmarkResourcePropertyForKey:(id)arg1;
- (unsigned long long)_is_SequenceNumber;
- (id)_is_databaseUUID;
- (void)_is_getSequenceNumber:(unsigned long long*)arg1 andUUID:(id*)arg2;
- (id)_is_persistentIdentifierDigest;

// Image: /System/Library/PrivateFrameworks/IntentsFoundation.framework/IntentsFoundation

+ (id)if_dataWithAuditToken:(struct { unsigned int x1[8]; })arg1;
+ (id)if_dataWithValue:(id)arg1;

- (struct { unsigned int x1[8]; })if_auditToken;
- (id)if_valueOfType:(const char *)arg1;

// Image: /System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration

+ (id)MCDataFromFile:(id)arg1;
+ (id)MCDataWithCFData:(struct __CFData { }*)arg1;
+ (id)MCDataWithHexString:(id)arg1;

- (id)MCHexString;
- (id)MCSHA256Hash;

// Image: /System/Library/PrivateFrameworks/MobileBackup.framework/MobileBackup

+ (id)mb_dataFromHexadecimalString:(id)arg1;

- (id)mb_hexadecimalString;

// Image: /System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation

- (bool)MI_writeAtomicallyToURL:(id)arg1 withMode:(unsigned short)arg2 owner:(unsigned int)arg3 group:(unsigned int)arg4 error:(id*)arg5;
- (bool)MI_writeAtomicallyToURL:(id)arg1 withMode:(unsigned short)arg2 owner:(unsigned int)arg3 group:(unsigned int)arg4 protectionClass:(int)arg5 error:(id*)arg6;
- (bool)MI_writeAtomicallyToURLMatchingCurrentFileMetadata:(id)arg1 error:(id*)arg2;

// Image: /System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry

+ (id)dataWithRandomBytesOfSize:(unsigned long long)arg1;
+ (id)fromUUID:(id)arg1;

- (id)NRSHA256;
- (void)NRSHA256:(unsigned char)arg1;
- (bool)matchesDataAtFilePath:(id)arg1;
- (id)toUUID;

// Image: /System/Library/PrivateFrameworks/Navigation.framework/Navigation

- (unsigned long long)_navigation_unsignedIntegerValue;

// Image: /System/Library/PrivateFrameworks/ProactiveSupport.framework/ProactiveSupport

- (id)_pas_dataWithNonnullBytes;
- (id)_pas_revivedString;

// Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore

- (id)_uiSaveContentsToTemporaryFile;

// Image: /System/Library/PrivateFrameworks/WebKitLegacy.framework/WebKitLegacy

- (bool)_web_isCaseInsensitiveEqualToCString:(const char *)arg1;
- (long long)_web_locationAfterFirstBlankLine;
- (bool)_web_startsWithBlankLine;
- (id)_webkit_guessedMIMEType;
- (id)_webkit_guessedMIMETypeForXML;
- (id)_webkit_parseRFC822HeaderFields;

// Image: /System/Library/PrivateFrameworks/vCard.framework/vCard

+ (unsigned long long)_cn_maxDataLengthFittingInBase64EncodingLength:(unsigned long long)arg1;

- (id)_cn_encodeVCardBase64DataWithInitialLength:(unsigned long long)arg1;

// Image: /usr/lib/libprequelite.dylib

+ (id)newFromSqliteStatement:(struct sqlite3_stmt { }*)arg1 atIndex:(int)arg2;
+ (id)newFromSqliteValue:(struct sqlite3_value { }*)arg1;

- (void)sqliteBind:(struct sqlite3_stmt { }*)arg1 index:(int)arg2;

@end
