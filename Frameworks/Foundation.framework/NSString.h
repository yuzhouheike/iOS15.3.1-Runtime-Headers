/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Foundation.framework/Foundation
 */

@interface NSString : NSObject <AFSecurityDigestibleChunksProviding, CKRecordValue, CKShortDescription, CLSGraphVertex, CNKeyDescriptor_Private, CNUIURLDestinationID, CSCoderEncoder, CUByteCodable, INCodableAttributeRelationComparing, INJSONSerializable, ISCompositorResource, MTMaterialSettingsPropertyIdentityValueProviding, NSCopying, NSItemProviderReading, NSItemProviderWriting, NSMutableCopying, NSSecureCoding, PQLValuable, SASerializable, UIItemProviderReading, UIItemProviderWriting, _DKDeduping, _PASDistilledString, _UIMenuImageOrName>

@property (readonly, copy) NSString *SZ_stringByDeletingTrailingSlashes;
@property (nonatomic, readonly) NSData *_FTDataFromBase64String;
@property (nonatomic, readonly) NSData *_FTDataFromHexString;
@property (nonatomic, readonly) NSAttributedString *__baseAttributedString;
@property (nonatomic, readonly) UIImage *_asMenuElementImage;
@property (nonatomic, readonly) NSString *_asMenuElementImageName;
@property (readonly) bool _cn_requiresPhoneNumberSanitizing;
@property (getter=carpf_isInteger, readonly) bool carpf_integer;
@property (getter=carpf_isNumeric, readonly) bool carpf_numeric;
@property (readonly) bool containsDotDotPathComponents;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) NSString *fp_obfuscatedProviderDomainID;
@property (nonatomic, readonly) bool hasMobileMeSuffix;
@property (readonly) unsigned long long hash;
@property (readonly) unsigned long long length;
@property (nonatomic, readonly) NSString *mobileMeDomain;
@property (nonatomic, readonly) bool pn_hasInternationalDirectDialingPrefix;
@property (nonatomic, readonly) NSString *sha224;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{basic_string<char' */ struct  stdString; /* unknown property attribute:  std::allocator<char>>={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}} */
@property (readonly, copy) NSString *stringByRemovingPercentEncoding;
@property (nonatomic, readonly) NSString *stripMobileMSuffixIfPresent;
@property (readonly) Class superclass;
@property (nonatomic, readonly, copy) NSArray *un_localizedStringArguments;
@property (nonatomic, readonly, copy) NSString *un_localizedStringKey;
@property (nonatomic, readonly, copy) NSString *un_localizedStringValue;
@property (nonatomic, readonly) id vertexID;
@property (nonatomic, readonly, copy) NSArray *writableTypeIdentifiersForItemProvider;

// Image: /System/Library/Frameworks/Foundation.framework/Foundation

+ (id)_newStringFromUTF16InternalData:(id)arg1 typeIdentifier:(id)arg2 error:(id*)arg3;
+ (id)_newZStringWithCharacters:(const unsigned short*)arg1 length:(unsigned long long)arg2;
+ (id)_newZStringWithString:(id)arg1;
+ (id)_newZStringWithUTF8String:(const char *)arg1;
+ (bool)_subclassesMustBeExplicitlyMentionedWhenDecoded;
+ (id)_web_stringRepresentationForBytes:(long long)arg1;
+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (const unsigned long long*)availableStringEncodings;
+ (unsigned long long)defaultCStringEncoding;
+ (void)initialize;
+ (id)localizedNameOfStringEncoding:(unsigned long long)arg1;
+ (id)localizedStringWithFormat:(id)arg1;
+ (id)localizedStringWithValidatedFormat:(id)arg1 validFormatSpecifiers:(id)arg2 error:(id*)arg3;
+ (id)objectWithItemProviderData:(id)arg1 typeIdentifier:(id)arg2 error:(id*)arg3;
+ (id)pathWithComponents:(id)arg1;
+ (id)readableTypeIdentifiersForItemProvider;
+ (id)string;
+ (unsigned long long)stringEncodingForData:(id)arg1 encodingOptions:(id)arg2 convertedString:(id*)arg3 usedLossyConversion:(bool*)arg4;
+ (id)stringWithBytes:(const void*)arg1 length:(unsigned long long)arg2 encoding:(unsigned long long)arg3;
+ (id)stringWithCString:(const char *)arg1;
+ (id)stringWithCString:(const char *)arg1 encoding:(unsigned long long)arg2;
+ (id)stringWithCString:(const char *)arg1 length:(unsigned long long)arg2;
+ (id)stringWithCharacters:(const unsigned short*)arg1 length:(unsigned long long)arg2;
+ (id)stringWithContentsOfFile:(id)arg1;
+ (id)stringWithContentsOfFile:(id)arg1 encoding:(unsigned long long)arg2 error:(id*)arg3;
+ (id)stringWithContentsOfFile:(id)arg1 usedEncoding:(unsigned long long*)arg2 error:(id*)arg3;
+ (id)stringWithContentsOfURL:(id)arg1;
+ (id)stringWithContentsOfURL:(id)arg1 encoding:(unsigned long long)arg2 error:(id*)arg3;
+ (id)stringWithContentsOfURL:(id)arg1 usedEncoding:(unsigned long long*)arg2 error:(id*)arg3;
+ (id)stringWithFormat:(id)arg1;
+ (id)stringWithFormat:(id)arg1 locale:(id)arg2;
+ (id)stringWithString:(id)arg1;
+ (id)stringWithUTF8String:(const char *)arg1;
+ (id)stringWithValidatedFormat:(id)arg1 validFormatSpecifiers:(id)arg2 error:(id*)arg3;
+ (bool)supportsSecureCoding;
+ (id)writableTypeIdentifiersForItemProvider;

- (const char *)UTF8String;
- (id)__baseAttributedString;
- (id)__escapeString5991;
- (bool)_allowsDirectEncoding;
- (unsigned long long)_cfTypeID;
- (id)_copyFormatStringWithConfiguration:(id)arg1;
- (id)_createSubstringWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (unsigned char)_encodingCantBeStoredInEightBitCFString;
- (const char *)_fastCStringContents:(bool)arg1;
- (const unsigned short*)_fastCharacterContents;
- (unsigned int)_fastestEncodingInCFStringEncoding;
- (void)_flushRegularExpressionCaches;
- (void)_getBlockStart:(unsigned long long*)arg1 end:(unsigned long long*)arg2 contentsEnd:(unsigned long long*)arg3 forRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 stopAtLineSeparators:(bool)arg5;
- (bool)_getCString:(char *)arg1 maxLength:(unsigned long long)arg2 encoding:(unsigned int)arg3;
- (id)_initWithBytesOfUnknownEncoding:(char *)arg1 length:(unsigned long long)arg2 copy:(bool)arg3 usedEncoding:(unsigned long long*)arg4;
- (id)_initWithDataOfUnknownEncoding:(id)arg1;
- (bool)_isCString;
- (id)_newSubstringWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 zone:(struct _NSZone { }*)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_rangeOfRegularExpressionPattern:(id)arg1 options:(unsigned long long)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 locale:(id)arg4;
- (unsigned int)_smallestEncodingInCFStringEncoding;
- (id)_stringByReplacingOccurrencesOfRegularExpressionPattern:(id)arg1 withTemplate:(id)arg2 options:(unsigned long long)arg3 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4;
- (id)_stringByResolvingSymlinksInPathUsingCache:(bool)arg1;
- (id)_stringByStandardizingPathUsingCache:(bool)arg1;
- (id)_stringRepresentation;
- (id)_web_HTTPStyleLanguageCode;
- (id)_web_HTTPStyleLanguageCodeWithoutRegion;
- (id)_web_URLFragment;
- (id)_web_characterSetFromContentTypeHeader_nowarn;
- (long long)_web_countOfString:(id)arg1;
- (id)_web_domainFromHost;
- (bool)_web_domainMatches:(id)arg1;
- (unsigned int)_web_extractFourCharCode;
- (id)_web_fileNameFromContentDispositionHeader_nowarn;
- (id)_web_filenameByFixingIllegalCharacters;
- (id)_web_fixedCarbonPOSIXPath;
- (bool)_web_hasCaseInsensitivePrefix:(id)arg1;
- (bool)_web_hasCountryCodeTLD;
- (bool)_web_isCaseInsensitiveEqualToString:(id)arg1;
- (bool)_web_isFileURL;
- (bool)_web_isJavaScriptURL;
- (bool)_web_looksLikeAbsoluteURL;
- (bool)_web_looksLikeIPAddress;
- (id)_web_mimeTypeFromContentTypeHeader_nowarn;
- (id)_web_parseAsKeyValuePairHandleQuotes_nowarn:(bool)arg1;
- (id)_web_parseAsKeyValuePair_nowarn;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_web_rangeOfURLHost;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_web_rangeOfURLResourceSpecifier_nowarn;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_web_rangeOfURLScheme_nowarn;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_web_rangeOfURLUserPasswordHostPort;
- (id)_web_splitAtNonDateCommas_nowarn;
- (id)_web_stringByCollapsingNonPrintingCharacters;
- (id)_web_stringByExpandingTildeInPath;
- (id)_web_stringByReplacingValidPercentEscapes_nowarn;
- (id)_web_stringByTrimmingWhitespace;
- (id)_widthVariants;
- (bool)boolValue;
- (const char *)cString;
- (unsigned long long)cStringLength;
- (const char *)cStringUsingEncoding:(unsigned long long)arg1;
- (bool)canBeConvertedToEncoding:(unsigned long long)arg1;
- (id)capitalizedString;
- (id)capitalizedStringWithLocale:(id)arg1;
- (long long)caseInsensitiveCompare:(id)arg1;
- (unsigned short)characterAtIndex:(unsigned long long)arg1;
- (Class)classForCoder;
- (id)commonPrefixWithString:(id)arg1 options:(unsigned long long)arg2;
- (long long)compare:(id)arg1;
- (long long)compare:(id)arg1 options:(unsigned long long)arg2;
- (long long)compare:(id)arg1 options:(unsigned long long)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (long long)compare:(id)arg1 options:(unsigned long long)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 locale:(id)arg4;
- (unsigned long long)completePathIntoString:(id*)arg1 caseSensitive:(bool)arg2 matchesIntoArray:(id*)arg3 filterTypes:(id)arg4;
- (id)componentsSeparatedByCharactersInSet:(id)arg1;
- (id)componentsSeparatedByString:(id)arg1;
- (bool)containsString:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)dataUsingEncoding:(unsigned long long)arg1;
- (id)dataUsingEncoding:(unsigned long long)arg1 allowLossyConversion:(bool)arg2;
- (struct { unsigned int x1 : 8; unsigned int x2 : 4; unsigned int x3 : 1; unsigned int x4 : 1; unsigned int x5 : 18; unsigned short x6[8]; })decimalValue;
- (id)decomposedStringWithCanonicalMapping;
- (id)decomposedStringWithCompatibilityMapping;
- (id)description;
- (id)displayableString;
- (double)doubleValue;
- (void)encodeWithCoder:(id)arg1;
- (void)enumerateLinesUsingBlock:(id /* block */)arg1;
- (void)enumerateLinguisticTagsInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 scheme:(id)arg2 options:(unsigned long long)arg3 orthography:(id)arg4 usingBlock:(id /* block */)arg5;
- (void)enumerateSubstringsInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 options:(unsigned long long)arg2 usingBlock:(id /* block */)arg3;
- (unsigned long long)fastestEncoding;
- (const char *)fileSystemRepresentation;
- (float)floatValue;
- (id)formatConfiguration;
- (bool)getBytes:(char *)arg1 maxLength:(unsigned long long)arg2 filledLength:(unsigned long long*)arg3 encoding:(unsigned long long)arg4 allowLossyConversion:(bool)arg5 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg6 remainingRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg7;
- (bool)getBytes:(void*)arg1 maxLength:(unsigned long long)arg2 usedLength:(unsigned long long*)arg3 encoding:(unsigned long long)arg4 options:(unsigned long long)arg5 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg6 remainingRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg7;
- (void)getCString:(char *)arg1;
- (void)getCString:(char *)arg1 maxLength:(unsigned long long)arg2;
- (bool)getCString:(char *)arg1 maxLength:(unsigned long long)arg2 encoding:(unsigned long long)arg3;
- (void)getCString:(char *)arg1 maxLength:(unsigned long long)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 remainingRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg4;
- (void)getCharacters:(unsigned short*)arg1;
- (void)getCharacters:(unsigned short*)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (bool)getExternalRepresentation:(id*)arg1 extendedAttributes:(id*)arg2 forWritingToURLOrPath:(id)arg3 usingEncoding:(unsigned long long)arg4 error:(id*)arg5;
- (bool)getFileSystemRepresentation:(char *)arg1 maxLength:(unsigned long long)arg2;
- (void)getLineStart:(unsigned long long*)arg1 end:(unsigned long long*)arg2 contentsEnd:(unsigned long long*)arg3 forRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4;
- (void)getParagraphStart:(unsigned long long*)arg1 end:(unsigned long long*)arg2 contentsEnd:(unsigned long long*)arg3 forRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4;
- (bool)hasPrefix:(id)arg1;
- (bool)hasSuffix:(id)arg1;
- (unsigned long long)hash;
- (id)init;
- (id)initWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2 encoding:(unsigned long long)arg3 deallocator:(id /* block */)arg4;
- (id)initWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2 encoding:(unsigned long long)arg3 freeWhenDone:(bool)arg4;
- (id)initWithCString:(const char *)arg1;
- (id)initWithCString:(const char *)arg1 encoding:(unsigned long long)arg2;
- (id)initWithCString:(const char *)arg1 length:(unsigned long long)arg2;
- (id)initWithCStringNoCopy:(char *)arg1 length:(unsigned long long)arg2 freeWhenDone:(bool)arg3;
- (id)initWithCharacters:(const unsigned short*)arg1 length:(unsigned long long)arg2;
- (id)initWithCharactersNoCopy:(unsigned short*)arg1 length:(unsigned long long)arg2 deallocator:(id /* block */)arg3;
- (id)initWithCharactersNoCopy:(unsigned short*)arg1 length:(unsigned long long)arg2 freeWhenDone:(bool)arg3;
- (id)initWithCoder:(id)arg1;
- (id)initWithContentsOfFile:(id)arg1;
- (id)initWithContentsOfFile:(id)arg1 encoding:(unsigned long long)arg2 error:(id*)arg3;
- (id)initWithContentsOfFile:(id)arg1 usedEncoding:(unsigned long long*)arg2 error:(id*)arg3;
- (id)initWithContentsOfURL:(id)arg1;
- (id)initWithContentsOfURL:(id)arg1 encoding:(unsigned long long)arg2 error:(id*)arg3;
- (id)initWithContentsOfURL:(id)arg1 usedEncoding:(unsigned long long*)arg2 error:(id*)arg3;
- (id)initWithData:(id)arg1 encoding:(unsigned long long)arg2;
- (id)initWithData:(id)arg1 usedEncoding:(unsigned long long*)arg2;
- (id)initWithFormat:(id)arg1;
- (id)initWithFormat:(id)arg1 arguments:(char *)arg2;
- (id)initWithFormat:(id)arg1 locale:(id)arg2;
- (id)initWithFormat:(id)arg1 locale:(id)arg2 arguments:(char *)arg3;
- (id)initWithString:(id)arg1;
- (id)initWithUTF8String:(const char *)arg1;
- (id)initWithValidatedFormat:(id)arg1 validFormatSpecifiers:(id)arg2 locale:(id)arg3 arguments:(char *)arg4 error:(id*)arg5;
- (int)intValue;
- (long long)integerValue;
- (bool)isAbsolutePath;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToString:(id)arg1;
- (bool)isNSString__;
- (id)lastPathComponent;
- (unsigned long long)length;
- (unsigned long long)lengthOfBytesUsingEncoding:(unsigned long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })lineRangeForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)linguisticTagsInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 scheme:(id)arg2 options:(unsigned long long)arg3 orthography:(id)arg4 tokenRanges:(id*)arg5;
- (id)loadDataWithTypeIdentifier:(id)arg1 forItemProviderCompletionHandler:(id /* block */)arg2;
- (id)localizedCapitalizedString;
- (long long)localizedCaseInsensitiveCompare:(id)arg1;
- (bool)localizedCaseInsensitiveContainsString:(id)arg1;
- (long long)localizedCompare:(id)arg1;
- (bool)localizedHasPrefix:(id)arg1;
- (bool)localizedHasSuffix:(id)arg1;
- (id)localizedLowercaseString;
- (long long)localizedStandardCompare:(id)arg1;
- (bool)localizedStandardContainsString:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })localizedStandardRangeOfString:(id)arg1;
- (id)localizedUppercaseString;
- (long long)longLongValue;
- (const char *)lossyCString;
- (id)lowercaseString;
- (id)lowercaseStringWithLocale:(id)arg1;
- (unsigned long long)maximumLengthOfBytesUsingEncoding:(unsigned long long)arg1;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })paragraphRangeForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)pathComponents;
- (id)pathExtension;
- (id)precomposedStringWithCanonicalMapping;
- (id)precomposedStringWithCompatibilityMapping;
- (id)propertyList;
- (id)propertyListFromStringsFileFormat;
- (id)quotedStringRepresentation;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfCharacterFromSet:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfCharacterFromSet:(id)arg1 options:(unsigned long long)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfCharacterFromSet:(id)arg1 options:(unsigned long long)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfComposedCharacterSequenceAtIndex:(unsigned long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfComposedCharacterSequencesForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfString:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfString:(id)arg1 options:(unsigned long long)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfString:(id)arg1 options:(unsigned long long)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfString:(id)arg1 options:(unsigned long long)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 locale:(id)arg4;
- (id)replacementObjectForPortCoder:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })significantText;
- (unsigned long long)smallestEncoding;
- (id)standardizedURLPath;
- (id)stringByAbbreviatingWithTildeInPath;
- (id)stringByAddingPercentEncodingWithAllowedCharacters:(id)arg1;
- (id)stringByAddingPercentEscapes;
- (id)stringByAddingPercentEscapesUsingEncoding:(unsigned long long)arg1;
- (id)stringByAppendingFormat:(id)arg1;
- (id)stringByAppendingPathComponent:(id)arg1;
- (id)stringByAppendingPathExtension:(id)arg1;
- (id)stringByAppendingString:(id)arg1;
- (id)stringByApplyingTransform:(id)arg1 reverse:(bool)arg2;
- (id)stringByConvertingPathToURL;
- (id)stringByConvertingURLToPath;
- (id)stringByDeletingLastPathComponent;
- (id)stringByDeletingPathExtension;
- (id)stringByExpandingTildeInPath;
- (id)stringByFoldingWithOptions:(unsigned long long)arg1 locale:(id)arg2;
- (id)stringByPaddingToLength:(unsigned long long)arg1 withString:(id)arg2 startingAtIndex:(unsigned long long)arg3;
- (id)stringByRemovingPercentEncoding;
- (id)stringByRemovingPercentEscapes;
- (id)stringByReplacingCharactersInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 withString:(id)arg2;
- (id)stringByReplacingOccurrencesOfString:(id)arg1 withString:(id)arg2;
- (id)stringByReplacingOccurrencesOfString:(id)arg1 withString:(id)arg2 options:(unsigned long long)arg3 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4;
- (id)stringByReplacingPercentEscapesUsingEncoding:(unsigned long long)arg1;
- (id)stringByResolvingSymlinksInPath;
- (id)stringByStandardizingPath;
- (id)stringByTrimmingCharactersInSet:(id)arg1;
- (id)stringsByAppendingPaths:(id)arg1;
- (id)substringFromIndex:(unsigned long long)arg1;
- (id)substringToIndex:(unsigned long long)arg1;
- (id)substringWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)uppercaseString;
- (id)uppercaseStringWithLocale:(id)arg1;
- (id)variantFittingPresentationWidth:(long long)arg1;
- (id)writableTypeIdentifiersForItemProvider;
- (bool)writeToFile:(id)arg1 atomically:(bool)arg2;
- (bool)writeToFile:(id)arg1 atomically:(bool)arg2 encoding:(unsigned long long)arg3 error:(id*)arg4;
- (bool)writeToURL:(id)arg1 atomically:(bool)arg2;
- (bool)writeToURL:(id)arg1 atomically:(bool)arg2 encoding:(unsigned long long)arg3 error:(id*)arg4;

// Image: /Developer/Library/PrivateFrameworks/DebugHierarchyFoundation.framework/DebugHierarchyFoundation

- (bool)dbgBoolValue;
- (double)dbgCGFloatValue;
- (id)dbgDataValue;
- (double)dbgDoubleValue;
- (float)dbgFloatValue;
- (int)dbgIntValue;
- (long long)dbgIntegerValue;
- (long long)dbgLongLongValue;
- (long long)dbgLongValue;
- (id)dbgStringValue;
- (unsigned int)dbgUnsignedIntValue;
- (unsigned long long)dbgUnsignedIntegerValue;
- (unsigned long long)dbgUnsignedLongLongValue;
- (unsigned long long)dbgUnsignedLongValue;

// Image: /System/Library/Frameworks/ClassKit.framework/ClassKit

- (unsigned long long)_cls_stableHash;
- (id)sha224;
- (id)vertexID;

// Image: /System/Library/Frameworks/CloudKit.framework/CloudKit

- (id)CKBase64DecodedString;
- (id)CKBase64EncodedURLSafeString;
- (id)CKDPIdentifier_Device;
- (id)CKDPIdentifier_Raw;
- (id)CKDPIdentifier_Record;
- (id)CKDPIdentifier_ShareId;
- (id)CKDPIdentifier_Subscription;
- (id)CKDPIdentifier_User;
- (id)CKDPIdentifier_Zone;
- (id)CKMangledDocumentNameForURLFragment;
- (id)CKNilIfLengthZero;
- (id)CKSHA256;
- (id)CKSafeHashStringForPathComponent;
- (id)CKSafeStringForPathComponent;
- (id)CKSafeStringForURLPathComponent;
- (id)CKSafeStringForURLWithCharsToBeEscaped:(id)arg1;
- (id)CKSanitizedPath;
- (id)CKStringByReplacingUUIDsWithString:(id)arg1;
- (id)CKUnmangledDocumentNameFromURLFragment;
- (id)_CKDPIdentifierWithType:(int)arg1;
- (id)ckShortDescription;
- (void)ck_bindInStatement:(id)arg1 atIndex:(unsigned long long)arg2;

// Image: /System/Library/Frameworks/Contacts.framework/Contacts

- (void)_cn_executeGetterForRepresentedKeys:(id /* block */)arg1;
- (id)_cn_ignorableKeys;
- (id)_cn_optionalKeys;
- (id)_cn_requiredKeys;

// Image: /System/Library/Frameworks/ContactsUI.framework/ContactsUI

- (bool)cnui_containsEmojiCharacters;
- (bool)cnui_containsNonLatinCharacters;
- (unsigned int)cnui_firstUTF32Character;
- (bool)cnui_shouldTransliterateToLatin;
- (bool)cnui_shouldUseJapaneseTransliteration;
- (bool)cnui_shouldUseZhuyinTransliteration;
- (id)cnui_stringByTransliteratingToKanaAsName:(bool)arg1;
- (id)cnui_stringByTransliteratingToPhoneticCharactersForProperty:(id)arg1;

// Image: /System/Library/Frameworks/CoreData.framework/CoreData

- (long long)_caseInsensitiveNumericCompare:(id)arg1;

// Image: /System/Library/Frameworks/CoreServices.framework/CoreServices

+ (id)NSStringFromLSInstallPhase:(unsigned long long)arg1;
+ (id)NSStringFromLSInstallState:(unsigned long long)arg1;
+ (id)NSStringFromLSInstallType:(unsigned long long)arg1;

- (id)ls_cleanForPluginQuery;
- (bool)ls_matchesForPluginQuery:(id)arg1;
- (bool)ls_matchesStringForPluginQuery:(id)arg1;
- (id)ls_visuallyOrderCharactersReturningError:(id*)arg1;

// Image: /System/Library/Frameworks/CoreSpotlight.framework/CoreSpotlight

- (void)encodeWithCSCoder:(id)arg1;

// Image: /System/Library/Frameworks/FileProvider.framework/FileProvider

+ (id)_fpd_pathWithFileSystemRepresentation:(const char *)arg1;
+ (id)fp_commonParentPathForItemURLs:(id)arg1;
+ (id)fp_defaultProviderDomainID;
+ (id)fp_hashForToken:(id)arg1;
+ (unsigned long long)fp_maximumBounceLevel;
+ (id)fp_pathWithFileSystemRepresentation:(const char *)arg1;
+ (id)fp_providerDomainIDFromProviderID:(id)arg1 domainIdentifier:(id)arg2;
+ (id)fp_representableHFSFileNameWithBase:(id)arg1 suffix:(id)arg2 extension:(id)arg3 makeDotFile:(bool)arg4;
+ (struct __CFStringTokenizer { }*)fp_wordTokenizer;
+ (id)fpfs_initWithFSEventsFlags:(unsigned int)arg1;
+ (void)setFp_defaultProviderDomainID:(id)arg1;

- (id)_fp_escapedStringForSearchQuery;
- (id)fp_alwaysObfuscatedFilename;
- (id)fp_alwaysObfuscatedPath;
- (id)fp_bouncedNameWithIndex:(long long)arg1;
- (id)fp_displayNameFromFilenameWithHiddenPathExtension:(bool)arg1 isFolder:(bool)arg2;
- (void)fp_enumerateTokensInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 tokenizer:(struct __CFStringTokenizer { }*)arg2 usingBlock:(id /* block */)arg3;
- (const char *)fp_fileSystemRepresentation;
- (id)fp_filenameFromDisplayNameWithExtension:(id)arg1;
- (id)fp_formatStringWithValues:(id)arg1 error:(id*)arg2;
- (id)fp_fpIdentifier;
- (bool)fp_isCJKLanguageIdentifier;
- (bool)fp_isiCloudDriveOrCloudDocsIdentifier;
- (id)fp_libnotifyPerUserNotificationName;
- (id)fp_localizedFormatWithKeys:(id)arg1 fromDictionary:(id)arg2 error:(id*)arg3;
- (id)fp_obfuscatedFilename;
- (id)fp_obfuscatedPath;
- (id)fp_obfuscatedProviderDomainID;
- (id)fp_pathExtension;
- (id)fp_prettyPath;
- (id)fp_prettyPathWithObfuscation:(bool)arg1;
- (id)fp_realpath;
- (id)fp_representableHFSFileNameWithNumber:(id)arg1 addedExtension:(id)arg2 makeDotFile:(bool)arg3;
- (id)fp_representableHFSFileNameWithSuffix:(id)arg1 addedExtension:(id)arg2 makeDotFile:(bool)arg3;
- (id)fp_stringByDeletingPathBounceNo:(id*)arg1 andPathExtension:(id*)arg2;
- (id)fp_stringByDeletingPathExtension;
- (id)fp_toDomainIdentifier;
- (id)fp_toProviderID;
- (bool)fp_usesDSCopyEngine;

// Image: /System/Library/Frameworks/Intents.framework/Intents

+ (id)_intents_decodeWithJSONDecoder:(id)arg1 codableDescription:(id)arg2 from:(id)arg3;
+ (id)deferredLocalizedIntentsStringWithFormat:(id)arg1;
+ (id)deferredLocalizedIntentsStringWithFormat:(id)arg1 fromTable:(id)arg2;
+ (id)deferredLocalizedIntentsStringWithFormat:(id)arg1 fromTable:(id)arg2 arguments:(char *)arg3;
+ (id)deferredLocalizedIntentsStringWithFormat:(id)arg1 fromTable:(id)arg2 bundle:(id)arg3;

- (bool)_intents_compareValue:(id)arg1 relation:(unsigned long long)arg2;
- (id)_intents_decodeFromProto;
- (id)_intents_encodeForProto;
- (id)_intents_encodeWithJSONEncoder:(id)arg1 codableDescription:(id)arg2;
- (id)_intents_localizedCopyWithLocalizer:(id)arg1;
- (id)_intents_readableTitleWithLocalizer:(id)arg1 metadata:(id)arg2;
- (id)localizeForLanguage:(id)arg1;

// Image: /System/Library/Frameworks/MapKit.framework/MapKit

+ (id)_mapkit_commaListDelimiter;
+ (id)_mapkit_formattedStringForCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg1;
+ (id)_mapkit_formattedStringForFloat:(double)arg1;
+ (id)_mapkit_formattedStringForFloatingPointNumber:(id)arg1;
+ (id)_mapkit_localizedDistanceStringWithMeters:(unsigned int)arg1 abbreviated:(bool)arg2;
+ (id)_mapkit_shortenedURLStringForFullURLString:(id)arg1;
+ (id)_mapkit_voiceOverLocalizedDistanceStringWithMeters:(unsigned int)arg1;

- (double)_mapkit_cgFloatValue;
- (id)_mapkit_componentsSeparatedFromCommaDelimitedList;
- (id)mkServerFormattedString;

// Image: /System/Library/Frameworks/QuartzCore.framework/QuartzCore

- (id)CAMLType;
- (void)encodeWithCAMLWriter:(id)arg1;

// Image: /System/Library/Frameworks/SceneKit.framework/SceneKit

- (unsigned long long)SCN_safeHash;
- (id)scn_stringByReplacingCharactersInRanges:(id)arg1 withStrings:(id)arg2;

// Image: /System/Library/Frameworks/UniformTypeIdentifiers.framework/UniformTypeIdentifiers

- (id)stringByAppendingPathComponent:(id)arg1 conformingToType:(id)arg2;
- (id)stringByAppendingPathExtensionForType:(id)arg1;

// Image: /System/Library/Frameworks/UserNotifications.framework/UserNotifications

+ (id)localizedUserNotificationStringForKey:(id)arg1 arguments:(id)arg2;

- (bool)un_isFirstPartyIdentifier;
- (id)un_localizedStringArguments;
- (id)un_localizedStringKey;
- (id)un_localizedStringValue;
- (id)un_logDigest;
- (id)un_stringWithMaxLength:(unsigned long long)arg1;
- (unsigned long long)un_unsignedLongLongValue;

// Image: /System/Library/PrivateFrameworks/AddressBookLegacy.framework/AddressBookLegacy

- (id)abEscapeStringForUnichar:(unsigned short)arg1 and:(unsigned short)arg2 advance:(long long*)arg3;
- (id)abStringByRemovingCharactersFromSet:(id)arg1;
- (id)abStringByStrippingControlCharacters;
- (id)abVCardKoshify;
- (id)copyABVCardDataRepresentation;

// Image: /System/Library/PrivateFrameworks/AppleAccount.framework/AppleAccount

+ (id)aa_handleForIDSDestination:(id)arg1;

- (id)_phoneNumberDetector;
- (bool)aa_appearsToBeEmail;
- (bool)aa_appearsToBePhoneNumber;
- (id)aa_base64String;

// Image: /System/Library/PrivateFrameworks/AppleMediaServices.framework/AppleMediaServices

+ (id)_replaceBreakingSpaceMarkupForMutableAttributedString:(id)arg1;
+ (id)_replaceMarkupForMutableAttributedString:(id)arg1 markupType:(long long)arg2;

- (bool)ams_caseInsensitiveEquals:(id)arg1;
- (bool)ams_matchesRegex:(id)arg1;
- (id)ams_replacingMarkupUsingAccount:(id)arg1 shouldUppercase:(bool)arg2;
- (id)ams_replacingPatternWithUsername:(id)arg1;
- (id)ams_stringByRemovingCharactersInSet:(id)arg1;

// Image: /System/Library/PrivateFrameworks/ApplePushService.framework/ApplePushService

+ (id)apsStringGUID;

// Image: /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices

+ (id)hexStringFromBytes:(const char *)arg1 length:(unsigned long long)arg2;
+ (id)hexStringFromData:(id)arg1;

- (id)_af_stringByRemovingPrefixWithLength:(unsigned long long)arg1;
- (id)_af_stringByRemovingSuffix:(id)arg1;
- (bool)_afpreferences_isLanguageCodePrefix;
- (id)_afpreferences_languageCodePrefix;
- (id)ad_shortDescription;
- (void)af_enumerateDigestibleChunksWithOptions:(unsigned long long)arg1 usingBlock:(id /* block */)arg2;

// Image: /System/Library/PrivateFrameworks/AuthKit.framework/AuthKit

+ (id)ak_base64EncodedJsonFromObject:(id)arg1;

- (id)ak_SHA256;
- (id)ak_SHA256String;
- (bool)ak_isEmailAddress;
- (id)ak_stringByZeroPaddingOccurencesOfString:(id)arg1;
- (id)ak_truncatedCopy;
- (id)ak_urlEncoded;

// Image: /System/Library/PrivateFrameworks/BaseBoard.framework/BaseBoard

- (id)_initWithUTF8String:(const char *)arg1 maxLength:(unsigned long long)arg2;

// Image: /System/Library/PrivateFrameworks/C2.framework/C2

- (unsigned long long)c2UniformlyDistributedIdentifier;

// Image: /System/Library/PrivateFrameworks/CARPFoundation.framework/CARPFoundation

- (bool)carpf_isInteger;
- (bool)carpf_isNumeric;

// Image: /System/Library/PrivateFrameworks/CacheDelete.framework/CacheDelete

+ (id)stringWithFileSystemRepresentation:(const char *)arg1;
+ (id)stringWithFileSystemRepresentation:(const char *)arg1 length:(unsigned long long)arg2;

// Image: /System/Library/PrivateFrameworks/CloudDocs.framework/CloudDocs

+ (id)_br_containerPathForDataSeparatedPersona;
+ (id)br_currentHomeDir;
+ (id)br_currentMobileDocumentsDir;
+ (id)br_currentPersonaIDWithIsDataSeparated:(bool*)arg1;
+ (id)br_currentSupportDir;
+ (id)br_emptyFilenameAlternativeName;
+ (id)br_pathForDirectory:(unsigned long long)arg1;
+ (id)br_pathWithDeviceID:(int)arg1 fileID:(unsigned long long)arg2;
+ (id)br_pathWithFileSystemRepresentation:(const char *)arg1;
+ (id)br_personaGroupDir;
+ (id)br_representableHFSFileNameWithBase:(id)arg1 suffix:(id)arg2 extension:(id)arg3 makeDotFile:(bool)arg4;

- (id)_br_nameWithAddedExtension:(id)arg1 makeDotFile:(bool)arg2;
- (long long)br_compareToStringForHFS:(id)arg1 isCaseSensitive:(bool)arg2;
- (id)br_decodeIndexStringToIndexSet;
- (id)br_displayFilenameWithExtensionHidden:(bool)arg1;
- (const char *)br_fileSystemRepresentation;
- (bool)br_isAbsolutePath;
- (bool)br_isDocumentTooLargeForUpload:(bool)arg1 maxUploadDocumentSize:(long long)arg2;
- (bool)br_isEqualToStringForHFS:(id)arg1 isCaseSensitive:(bool)arg2;
- (bool)br_isExcludedButPreservedAtLogOutWithFilenames:(id)arg1 extensions:(id)arg2;
- (bool)br_isExcludedWithMaximumDepth:(unsigned int)arg1;
- (bool)br_isInPackage;
- (bool)br_isPackageRoot;
- (bool)br_isSideFaultName;
- (id)br_libnotifyPerUserNotificationName;
- (bool)br_nameIsRepresentableOnHFS;
- (id)br_pathExtension;
- (id)br_pathOfPackageRoot;
- (id)br_pathRelativeToDirectory:(unsigned long long)arg1;
- (id)br_pathRelativeToPackageRoot;
- (id)br_pathRelativeToPath:(id)arg1;
- (id)br_realpath;
- (id)br_realpathKeepingLastSymlink;
- (id)br_representableDirectoryName;
- (id)br_representableHFSFileNameWithNumber:(id)arg1 addedExtension:(id)arg2 makeDotFile:(bool)arg3;
- (id)br_sideFaultName;
- (id)br_sideFaultPath;
- (id)br_stringByBackslashEscapingCharactersInString:(id)arg1;
- (id)br_stringByDeletingPathBounceNo:(unsigned long long*)arg1;
- (id)br_stringByDeletingPathBounceNo:(unsigned long long*)arg1 andPathExtension:(id*)arg2;
- (id)brc_representableHFSFileNameWithSuffix:(id)arg1 addedExtension:(id)arg2 makeDotFile:(bool)arg3;
- (id)brc_stringByDeletingPathExtension;
- (id)removingROSPPrefix;

// Image: /System/Library/PrivateFrameworks/CommonUtilities.framework/CommonUtilities

+ (id)cutStringGUID;

- (id)cutStringByResolvingAndStandardizingPath;

// Image: /System/Library/PrivateFrameworks/ContactsFoundation.framework/ContactsFoundation

+ (id)_cn_LTRControlCharacters;
+ (bool)_cn_isBlank:(id)arg1;
+ (id)_cn_phoneNumberInvalidCharacters;
+ (id)_cn_stringByRepeatingCharacter:(BOOL)arg1 length:(unsigned long long)arg2;
+ (id)_cn_whitespaceExceptAscii32CharacterSet;

- (id)_cn_SHA256HashStringWithSalt:(id)arg1;
- (bool)_cn_caseInsensitiveIsEqual:(id)arg1;
- (bool)_cn_containsCharacterInSet:(id)arg1;
- (bool)_cn_containsSubstring:(id)arg1;
- (bool)_cn_containsSubstring:(id)arg1 options:(unsigned long long)arg2;
- (void)_cn_eachCharacter:(id /* block */)arg1;
- (id)_cn_flatMap:(id /* block */)arg1;
- (bool)_cn_hasCaseAndDiacriticInsensitivePrefix:(id)arg1;
- (bool)_cn_hasPrefix:(id)arg1;
- (bool)_cn_hasPrefix:(id)arg1 options:(unsigned long long)arg2;
- (bool)_cn_hasSuffix:(id)arg1;
- (bool)_cn_hasSuffix:(id)arg1 options:(unsigned long long)arg2;
- (bool)_cn_isBlank;
- (id)_cn_nameComponentTokens;
- (id)_cn_nameComponentTokensUsingLocale:(id)arg1 inferredNameOrder:(long long*)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_cn_rangeFromIndex:(unsigned long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_cn_rangeOfAnchoredCharacters:(unsigned long long)arg1 options:(unsigned long long)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_cn_rangeOfCommonPrefixWithString:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_cn_rangeOfCommonPrefixWithString:(id)arg1 options:(unsigned long long)arg2;
- (bool)_cn_requiresPhoneNumberSanitizing;
- (id)_cn_resultWithAllCharacters:(id /* block */)arg1;
- (id)_cn_skip:(unsigned long long)arg1;
- (id)_cn_skipLast:(unsigned long long)arg1;
- (id)_cn_stringByAddingPercentEscapesIfNecessary;
- (id)_cn_stringByAddingPercentEscapesToEntireURL;
- (id)_cn_stringByDeletingCharactersInSet:(id)arg1;
- (id)_cn_stringByDeletingNumberOfPathComponents:(unsigned long long)arg1;
- (id)_cn_stringByNormalizingCase;
- (id)_cn_stringByNormalizingWhitespace;
- (id)_cn_stringByReplacingStrings:(id)arg1;
- (id)_cn_stringBySanitizingPhoneNumber;
- (id)_cn_take:(unsigned long long)arg1;
- (id)_cn_takeLast:(unsigned long long)arg1;
- (id)_cn_tokens;
- (id)_cn_trimmedString;
- (id)_cn_truncateAtLength:(unsigned long long)arg1 addEllipsisIfTrunctated:(bool)arg2;

// Image: /System/Library/PrivateFrameworks/ContactsUICore.framework/ContactsUICore

- (id)_cnui_URLDestinationID;

// Image: /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet

- (id)dedup;
- (id)dk_dedup;

// Image: /System/Library/PrivateFrameworks/CoreMaterial.framework/CoreMaterial

+ (id)mt_identityValueForMaterialSettingsProperty:(id)arg1;

- (bool)mt_isIdentityValueForMaterialSettingsProperty:(id)arg1;

// Image: /System/Library/PrivateFrameworks/CoreRecents.framework/CoreRecents

- (id)cr_copyIDNADecodedEmailAddress;
- (id)cr_copyIDNAEncodedEmailAddress;
- (id)cr_copyStringByDecodingIDNAInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)cr_copyStringByEncodingIDNAInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)cr_lowercaseStringWithStandardLocale;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })cr_rangeOfAddressDomain;
- (id)cr_uniqueFilenameWithRespectToFilenames:(id)arg1;

// Image: /System/Library/PrivateFrameworks/CoreSuggestions.framework/CoreSuggestions

- (id)sg_dataEnumeratorUsingEncoding:(unsigned long long)arg1;
- (id)sg_dataEnumeratorUsingEncoding:(unsigned long long)arg1 nullTerminated:(bool)arg2;
- (id)sg_md5Hash;
- (void)sg_streamBytesUsingEncoding:(unsigned long long)arg1 nullTerminated:(bool)arg2 toBlock:(id /* block */)arg3;
- (void)sg_streamBytesUsingEncoding:(unsigned long long)arg1 toBlock:(id /* block */)arg2;

// Image: /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils

+ (id)createWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2 error:(id*)arg3;

- (const char *)encodedBytesAndReturnLength:(unsigned long long*)arg1 error:(id*)arg2;
- (id)encodedDataAndReturnError:(id*)arg1;

// Image: /System/Library/PrivateFrameworks/DMCUtilities.framework/DMCUtilities

+ (id)DMCMakeUUID;

- (id)DMCAppendDeviceName;
- (id)DMCAppendGreenteaSuffix;
- (id)dmc_substringWithPattern:(id)arg1;

// Image: /System/Library/PrivateFrameworks/DataAccessExpress.framework/DataAccessExpress

+ (id)DACPLogMakeUUID;

// Image: /System/Library/PrivateFrameworks/EmojiFoundation.framework/EmojiFoundation

- (bool)_containsEmoji;
- (void)_enumerateEmojiTokensInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 block:(id /* block */)arg2;
- (bool)_isSingleEmoji;

// Image: /System/Library/PrivateFrameworks/FTServices.framework/FTServices

- (id)_FTDataFromBase64String;
- (id)_FTDataFromHexString;

// Image: /System/Library/PrivateFrameworks/GenerationalStorage.framework/GenerationalStorage

+ (id)gs_stringWithFileSystemRepresentation:(const char *)arg1;

- (id)gs_issueExtension:(const char *)arg1 error:(id*)arg2;
- (id)gs_issueReadExtensionIfNeededForAuditToken:(struct { unsigned int x1[8]; })arg1;
- (id)gs_stringByUpdatingPathExtensionWithPathOrURL:(id)arg1;
- (bool)validateGSName:(out id*)arg1;
- (bool)validateGSNameAllowingDot:(bool)arg1 error:(id*)arg2;

// Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices

+ (id)_geo_keyStringForCacheHitWithLoadReason:(unsigned char)arg1 tileSource:(unsigned char)arg2 tileStyle:(int)arg3;
+ (id)_geo_keyStringForCacheMissErrorDomain:(id)arg1 code:(long long)arg2;
+ (id)_geo_keyStringForCacheMissWithLoadReason:(unsigned char)arg1 missType:(int)arg2 tileStyle:(int)arg3 httpStatus:(unsigned int)arg4;
+ (id)stringWithStdString:(const void*)arg1 copy:(bool)arg2;

- (void)_geo_cacheHitParameters:(id /* block */)arg1;
- (void)_geo_cacheMissErrorParameters:(id /* block */)arg1;
- (void)_geo_cacheMissParameters:(id /* block */)arg1;
- (id)_geo_formattedString;
- (id)initWithStdString:(const void*)arg1 copy:(bool)arg2;
- (id)serverFormattedString;
- (struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *x_1_4_1; unsigned long long x_1_4_2; unsigned long long x_1_4_3; } x_1_3_1; struct __short { BOOL x_2_4_1[23]; struct { unsigned char x_2_5_1; } x_2_4_2; } x_1_3_2; struct __raw { unsigned long long x_3_4_1[3]; } x_1_3_3; } x_1_2_1; } x_1_1_1; } x1; })stdString;

// Image: /System/Library/PrivateFrameworks/IDSFoundation.framework/IDSFoundation

- (id)destinationLightweightStatus;
- (id)destinationURIs;

// Image: /System/Library/PrivateFrameworks/IMFoundation.framework/IMFoundation

+ (id)copyStringGUID;
+ (id)copyStringGUIDForObject:(id)arg1;
+ (id)generatedRoomNameForGroupChat;
+ (id)randomString;
+ (id)stringGUID;
+ (id)stringGUIDForObject:(id)arg1;

- (long long)_FZBestGuessFZIDType;
- (id)_FZIDFromEmail;
- (id)_FZIDFromPhoneNumber;
- (long long)_FZIDType;
- (id)_IDFromFZIDType:(long long)arg1;
- (id)_URIFromBusinessID;
- (id)_URIFromCanonicalizedBusinessID;
- (id)_URIFromCanonicalizedDSID;
- (id)_URIFromCanonicalizedEmail;
- (id)_URIFromCanonicalizedFZIDType:(long long)arg1;
- (id)_URIFromCanonicalizedHardwareID;
- (id)_URIFromCanonicalizedPhoneNumber;
- (id)_URIFromCanonicalizedPseudonymID;
- (id)_URIFromCanonicalizedTemporaryID;
- (id)_URIFromDSID;
- (id)_URIFromEmail;
- (id)_URIFromFZIDType:(long long)arg1;
- (id)_URIFromHardwareID;
- (id)_URIFromPhoneNumber;
- (id)_URIFromPseudonymID;
- (id)_URIFromTemporaryID;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })__rangeOfNewlineInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)__stringByStrippingAttachmentAndControlCharacters;
- (id)__stringByStrippingControlCharacters;
- (bool)_appearsToBeBusinessID;
- (bool)_appearsToBeDSID;
- (bool)_appearsToBeEmail;
- (bool)_appearsToBeHardwareID;
- (bool)_appearsToBePhoneNumber;
- (bool)_appearsToBePseudonymID;
- (bool)_appearsToBeTemporaryID;
- (id)_bestGuessURI;
- (id)_bestGuessURIFromCanicalizedID;
- (id)_imInitWithFormat:(id)arg1 arguments:(char *)arg2;
- (id)_im_normalizedURIString;
- (id)_md5Hash;
- (id)_stripFZIDPrefix;
- (id)_stripPotentialTokenURIWithToken:(id*)arg1;
- (bool)hasMobileMeSuffix;
- (unsigned int)hexValue;
- (bool)isDirectory;
- (bool)isEqualToIgnoringCase:(id)arg1;
- (long long)localizedCompareToString:(id)arg1;
- (id)mobileMeDomain;
- (id)pathStringForDisplay;
- (bool)roomNameIsProbablyAutomaticallyGenerated;
- (id)stringByAddingURLEscapes;
- (id)stringByRemovingCharactersFromSet:(id)arg1;
- (id)stringByRemovingURLEscapes;
- (id)stringByRemovingWhitespace;
- (id)stringByResolvingAndStandardizingPath;
- (id)stringWithLTREmbedding;
- (id)stripMobileMSuffixIfPresent;
- (id)trimmedString;
- (id)uniqueSavePath;
- (unsigned int)unsignedIntValue;
- (id)urlFromString;

// Image: /System/Library/PrivateFrameworks/IconServices.framework/IconServices

- (id)_IS_imageMetadataFromFileName;
- (id)_IS_scaleableResourceMetadataFromFileName;
- (id)imageMetadataFromFileName;
- (id)scaleableResourceMetadataFromFileName;

// Image: /System/Library/PrivateFrameworks/IntentsFoundation.framework/IntentsFoundation

+ (id)if_hexStringFromBytes:(const char *)arg1 length:(unsigned long long)arg2;
+ (id)if_hexStringFromData:(id)arg1;
+ (id)if_stringWithData:(id)arg1;

- (id)if_ASCIIStringByLowercasingFirstCharacter;
- (id)if_ASCIIStringByUppercasingFirstCharacter;
- (id)if_stringByLowercasingFirstCharacter;
- (id)if_stringByUppercasingFirstCharacter;

// Image: /System/Library/PrivateFrameworks/IntlPreferences.framework/IntlPreferences

- (id)localeIdentifierWithUpdatedScript:(id)arg1;

// Image: /System/Library/PrivateFrameworks/LocationSupport.framework/LocationSupport

- (bool)hasSuffixInsensitive:(id)arg1;

// Image: /System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration

+ (id)MCMakeUUID;

- (id)MCAppendDeviceName;
- (id)MCAppendGreenteaSuffix;
- (unsigned int)MCHash;
- (id)MCHashedFilenameWithExtension:(id)arg1;
- (id)MCHashedFilenameWithPrefix:(id)arg1 extension:(id)arg2;
- (id)MCHashedIdentifier;
- (id)MCOldStyleSafeFilenameHash;
- (id)MCOldStyleSafeFilenameHashWithExtension:(id)arg1;
- (id)MCRemoveAppExternalVersionIDParameter;
- (id)MCSHA256DigestWithPasscodeSalt;
- (id)MCSHA256DigestWithSalt:(id)arg1;

// Image: /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices

- (bool)msvl_isElementType:(id)arg1;
- (double)msvl_timeValue;

// Image: /System/Library/PrivateFrameworks/MobileBackup.framework/MobileBackup

+ (id)mb_stringWithFileSystemRepresentation:(const char *)arg1;

- (id)mb_backupIDByAddingCKPrefix;
- (id)mb_backupIDByRemovingCKPrefix;
- (bool)mb_pathComponentExistsInSet:(id)arg1;
- (void)mb_splitIntoBase:(int*)arg1 andRelativePath:(const char **)arg2;
- (id)mb_stringByAppendingGreenteaSuffix;
- (id)mb_stringByAppendingSlash;

// Image: /System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation

+ (id)stringWithFileSystemRepresentation:(const char *)arg1;
+ (id)stringWithFileSystemRepresentation:(const char *)arg1 length:(unsigned long long)arg2;

- (bool)containsDotDotPathComponents;

// Image: /System/Library/PrivateFrameworks/Navigation.framework/Navigation

+ (bool)_componentsWillUseShortFormat:(id)arg1;
+ (id)_frequencyDateComponents:(long long)arg1;
+ (id)_frequencyStringForComponents:(id)arg1 forRange:(bool)arg2 forceShort:(bool)arg3;
+ (long long)_navigation_abbreviatedFromatterUnitsStyleForLocale:(id)arg1;
+ (id)_navigation_addPrefixToInstructions:(id)arg1 isServer:(bool)arg2 isSpoken:(bool)arg3;
+ (id)_navigation_commaListDelimiter;
+ (bool)_navigation_compareServerInstructions:(id)arg1 withClientInstructions:(id)arg2;
+ (id)_navigation_descriptionForFrequencyMinuteValue:(long long)arg1;
+ (id)_navigation_descriptionForFrequencyRangeWithMinFrequency:(long long)arg1 maxFrequency:(long long)arg2 estimate:(bool)arg3 recurring:(bool)arg4;
+ (id)_navigation_formatFloatForPrintedDistance:(double)arg1;
+ (id)_navigation_formattedDescriptionForFrequency:(id)arg1;
+ (id)_navigation_formattedDescriptionForLiveStatus:(long long)arg1 updatedDepartureTimeString:(id)arg2;
+ (id)_navigation_formattedStringForFloat:(double)arg1;
+ (id)_navigation_formattedStringForFloat:(double)arg1 useIncreasedPrecision:(bool)arg2;
+ (id)_navigation_formattedStringForHourRanges:(id)arg1 timeZone:(id)arg2;
+ (id)_navigation_formattedStringForHourRanges:(id)arg1 timeZone:(id)arg2 delimeter:(id)arg3;
+ (id)_navigation_formattedStringForInteger:(long long)arg1;
+ (id)_navigation_formattedStringForOperatingHours:(id)arg1 timeZone:(id)arg2;
+ (id)_navigation_formattedStringForPriceValue:(double)arg1 currencyCode:(id)arg2;
+ (id)_navigation_formattedStringForPriceValueWithAmount:(id)arg1 currencyCode:(id)arg2;
+ (id)_navigation_formattedStringForPriceValueWithAmount:(id)arg1 currencyCode:(id)arg2 showsCurrencySymbol:(bool)arg3;
+ (id)_navigation_formatterForOptions:(id)arg1;
+ (id)_navigation_frequencyRangeLocalizedInHoursWithMinHours:(long long)arg1 maxHours:(long long)arg2 estimate:(bool)arg3 recurring:(bool)arg4;
+ (id)_navigation_frequencyRangeLocalizedInMinutesWithMinMinutes:(long long)arg1 maxMinutes:(long long)arg2 estimate:(bool)arg3 recurring:(bool)arg4;
+ (id)_navigation_frequencyRangeLocalizedInMixedUnitsWithMinString:(id)arg1 maxString:(id)arg2 estimate:(bool)arg3 recurring:(bool)arg4;
+ (id)_navigation_languageDirectionStringWithFormat:(id)arg1;
+ (id)_navigation_localizedStringForDistance:(double)arg1 context:(long long)arg2 extraDetail:(bool)arg3;
+ (id)_navigation_localizedStringForDistance:(double)arg1 detail:(long long)arg2 unitFormat:(long long)arg3 locale:(id)arg4 useMetric:(unsigned long long)arg5 useYards:(unsigned long long)arg6;
+ (id)_navigation_localizedStringForDistance:(double)arg1 detail:(long long)arg2 unitFormat:(long long)arg3 locale:(id)arg4 useMetric:(unsigned long long)arg5 useYards:(unsigned long long)arg6 shouldScale:(bool)arg7;
+ (bool)_navigation_logIfContainsVariables:(id)arg1;
+ (void)_navigation_logMismatchBetweenServerInstruction:(id)arg1 clientInstruction:(id)arg2;
+ (id)_navigation_overridenTokenForToken:(id)arg1 overrideVariables:(id)arg2;
+ (id)_navigation_pointerDescription:(id)arg1;
+ (id)_navigation_replacementForFormatToken:(id)arg1 abbreviatedUnits:(bool)arg2 detail:(long long)arg3 spoken:(bool)arg4 overrideVariables:(id)arg5;
+ (id)_navigation_replacementForFormatToken:(id)arg1 options:(struct { bool x1; long long x2; bool x3; bool x4; bool x5; double x6; })arg2 overrideVariables:(id)arg3;
+ (id)_navigation_replacementForFormatToken:(id)arg1 options:(struct { bool x1; long long x2; bool x3; bool x4; bool x5; double x6; })arg2 overrideVariables:(id)arg3 useMetric:(unsigned long long)arg4;
+ (id)_navigation_selectInstructionWithServerString:(id)arg1 isSpoken:(bool)arg2 clientBlock:(id /* block */)arg3;
+ (id)_navigation_selectInstructionWithServerStringArray:(id)arg1 isSpoken:(bool)arg2 clientBlock:(id /* block */)arg3;
+ (id)_navigation_spokenStringWithMinutes:(unsigned long long)arg1 andAbbreviationType:(unsigned long long)arg2;
+ (id)_navigation_spokenStringWithSeconds:(unsigned long long)arg1 abbreviated:(bool)arg2;
+ (id)_navigation_spokenStringWithSeconds:(unsigned long long)arg1 andAbbreviationType:(unsigned long long)arg2;
+ (id)_navigation_stringForDistance:(double)arg1 formatter:(id)arg2 locale:(id)arg3 shouldScale:(bool)arg4;
+ (id)_navigation_stringForExpectedTravelTime:(double)arg1 dateUnitStyle:(long long)arg2;
+ (id)_navigation_stringForPower:(double)arg1 unit:(id)arg2;
+ (id)_navigation_stringForServerFormattedString:(id)arg1;
+ (id)_navigation_stringForServerFormattedString:(id)arg1 abbreviatedUnits:(bool)arg2 detail:(long long)arg3 spoken:(bool)arg4 overrideVariables:(id)arg5;
+ (id)_navigation_stringForServerFormattedString:(id)arg1 abbreviatedUnits:(bool)arg2 detail:(long long)arg3 spoken:(bool)arg4 overrideVariables:(id)arg5 allTokensExpanded:(bool*)arg6;
+ (id)_navigation_stringForServerFormattedString:(id)arg1 options:(struct { bool x1; long long x2; bool x3; bool x4; bool x5; double x6; })arg2 overrideVariables:(id)arg3;
+ (id)_navigation_stringForServerFormattedString:(id)arg1 options:(struct { bool x1; long long x2; bool x3; bool x4; bool x5; double x6; })arg2 overrideVariables:(id)arg3 allTokensExpanded:(bool*)arg4;
+ (id)_navigation_stringWithAltitude:(double)arg1 accuracy:(double)arg2;
+ (id)_navigation_stringWithAltitudeUnits;
+ (id)_navigation_stringWithCountdownValue:(id)arg1 inToken:(id)arg2 options:(struct { bool x1; long long x2; bool x3; bool x4; bool x5; double x6; })arg3;
+ (id)_navigation_stringWithDirection:(double)arg1 abbreviated:(bool)arg2;
+ (id)_navigation_stringWithMinutes:(unsigned long long)arg1 andAbbreviationType:(unsigned long long)arg2;
+ (id)_navigation_stringWithSeconds:(unsigned long long)arg1 abbreviated:(bool)arg2;
+ (id)_navigation_stringWithSeconds:(unsigned long long)arg1 andAbbreviationType:(unsigned long long)arg2;
+ (id)_navigation_stringWithSpeed:(double)arg1;
+ (id)_navigation_stringWithSpeedUnits;
+ (id)_navigation_stringWithTime:(id)arg1;
+ (id)_navigation_stringWithTimeStampValues:(id)arg1 options:(struct { bool x1; long long x2; bool x3; bool x4; bool x5; double x6; })arg2;

- (bool)_navigation_containsVariables;
- (unsigned long long)_navigation_distanceLevenshtein:(id)arg1;
- (bool)_navigation_isCJK;
- (bool)_navigation_isEqualToString:(id)arg1;
- (bool)_navigation_isPrivate;
- (id)_navigation_sanitizedStringForDisplayInHTML;
- (id)_navigation_stringByEscapingHTML;
- (id)_navigation_stringByMakingPhonetic;
- (id)_navigation_stringByMarkingAsAddress;
- (id)_navigation_stringByMarkingAsNavigationText;
- (id)_navigation_stringByMarkingAsNormalText;
- (id)_navigation_stringByMarkingAsPrivateText;
- (id)_navigation_stringByReplacingNewLinesWithString:(id)arg1;
- (id)_navigation_stringByStrippingPrivateTag;
- (id)_navigation_stripDebugPrefix;
- (id)_navigation_stripTagsFromSpokenString;
- (id)_navigation_stripVariablesFromString;
- (id)mnlpr_componentsSeparatedByGlyph;

// Image: /System/Library/PrivateFrameworks/OSAnalytics.framework/OSAnalytics

- (id)stringByTrimming;
- (id)stringByTrimming;

// Image: /System/Library/PrivateFrameworks/PersonaKit.framework/PersonaKit

+ (id)pr_hexStringWithData:(id)arg1;

- (id)pr_SHADigest;
- (id)pr_numericValue;

// Image: /System/Library/PrivateFrameworks/PhoneNumbers.framework/PhoneNumbers

- (bool)pn_hasInternationalDirectDialingPrefix;

// Image: /System/Library/PrivateFrameworks/PlugInKit.framework/PlugInKit

- (long long)compareVersionString:(id)arg1;

// Image: /System/Library/PrivateFrameworks/ProactiveSupport.framework/ProactiveSupport

+ (id)_pas_distilledStringClasses;
+ (id)_pas_proxyStringByConcatenatingStrings:(id)arg1;
+ (id)_pas_stringWithDataNoCopy:(id)arg1 encoding:(unsigned long long)arg2 nullTerminated:(bool)arg3;
+ (id)_pas_stringWithDataNoCopy:(id)arg1 encoding:(unsigned long long)arg2 nullTerminated:(bool)arg3 isExternalRepresentation:(bool)arg4;

- (id)_pas_distilledString;
- (id)_pas_proxyArrayOfSubstringsWithRanges:(id)arg1;
- (bool)_pas_retainsConmingledBackingStore;
- (id)_pas_revivedString;
- (void)_pas_setRetainsConmingledBackingStore:(bool)arg1;
- (id)_pas_stringBackedByUTF8CString;

// Image: /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer

- (id)_pb_fixCase:(bool)arg1;

// Image: /System/Library/PrivateFrameworks/SampleAnalysis.framework/SampleAnalysis

+ (id)classDictionaryKey;
+ (id)newInstanceWithoutReferencesFromSerializedBuffer:(const void*)arg1 bufferLength:(unsigned long long)arg2;

- (bool)addSelfToBuffer:(void*)arg1 bufferLength:(unsigned long long)arg2 withCompletedSerializationDictionary:(id)arg3;
- (void)addSelfToSerializationDictionary:(id)arg1;
- (void)populateReferencesUsingBuffer:(const void*)arg1 bufferLength:(unsigned long long)arg2 andDeserializationDictionary:(id)arg3 andDataBufferDictionary:(id)arg4;
- (unsigned long long)sizeInBytesForSerializedVersion;

// Image: /System/Library/PrivateFrameworks/StreamingZip.framework/StreamingZip

- (id)SZ_stringByDeletingTrailingSlashes;

// Image: /System/Library/PrivateFrameworks/TextInput.framework/TextInput

+ (struct USet { }*)_bopomofoSet;
+ (struct USet { }*)_bopomofoToneSet;
+ (struct USet { }*)_bopomofoWithoutToneSet;
+ (struct USet { }*)_characterSetWithPattern:(id)arg1;
+ (struct USet { }*)_fullwidthLettersAndNumbersSet;
+ (struct USet { }*)_fullwidthLettersAndSymbolsSet;
+ (struct USet { }*)_hiraganaSet;
+ (struct USet { }*)_ideographSet;
+ (struct USet { }*)_japaneseLetterSet;
+ (struct USet { }*)_nonFullwidthLettersAndNumbersSet;
+ (struct USet { }*)_nonHiraganaKatakanaOrBopomofoSet;
+ (struct USet { }*)_nonHiraganaOrKatakanaSet;
+ (struct USet { }*)_nonIdeographicCharacterSet;
+ (struct USet { }*)_nonJapaneseLetterSet;
+ (struct USet { }*)_nonKatakanaOrKanjiSet;
+ (bool)_string:(id)arg1 matchesString:(id)arg2;
+ (id)_stringWithUnichar:(unsigned int)arg1;
+ (bool)_ti_string:(id)arg1 matchesStringIgnoringNullity:(id)arg2;
+ (id)stringWithUnichar:(unsigned int)arg1;

- (unsigned long long)_UTF8SizeOfRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (bool)_containsBopomofoOnly;
- (bool)_containsBopomofoToneOnly;
- (bool)_containsBopomofoWithoutToneOnly;
- (bool)_containsCJKScriptsOnly;
- (bool)_containsCJKSymbolsAndPunctuation;
- (bool)_containsCJScripts;
- (bool)_containsCJScriptsOnly;
- (bool)_containsEmoji;
- (bool)_containsEmojiOnly;
- (bool)_containsFullwidthLettersAndNumbers;
- (bool)_containsFullwidthLettersAndNumbersOnly;
- (bool)_containsFullwidthLettersAndSymbolsOnly;
- (bool)_containsHiraganaKatakanaOrBopomofo;
- (bool)_containsHiraganaOnly;
- (bool)_containsHiraganaOrKatakana;
- (bool)_containsIdeographicCharacters;
- (bool)_containsIdeographsOrBopomofoOnly;
- (bool)_containsJapanese;
- (bool)_containsJapaneseOnly;
- (bool)_containsKatakanaOrKanji;
- (bool)_containsSubstring:(id)arg1;
- (bool)_containsSymbolsAndPunctuationOnly;
- (bool)_contentsExclusivelyInCharacterSet:(struct USet { }*)arg1;
- (unsigned long long)_editDistanceFrom:(id)arg1;
- (bool)_endsSentence;
- (bool)_endsWithHalfwidth;
- (void)_enumerateLongCharactersInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 usingBlock:(id /* block */)arg2;
- (unsigned short)_firstChar;
- (id)_firstGrapheme;
- (unsigned int)_firstLongCharacter;
- (id)_graphemeAtIndex:(unsigned long long)arg1;
- (unsigned long long)_graphemeCount;
- (unsigned long long)_indexFromStartingIndex:(unsigned long long)arg1 byIncrementingComposedCharacterSequenceCount:(unsigned long long)arg2;
- (bool)_isBasicLatin;
- (bool)_isDelete;
- (bool)_isIdeographicGlyphs;
- (bool)_isLeftAssociative;
- (bool)_isModifierSymbol;
- (bool)_isNaturallyRTL;
- (bool)_isNewlineOrReturn;
- (bool)_isOnlyIdeographs;
- (bool)_isPlainSpace;
- (bool)_isSpace;
- (bool)_isSpaceOrReturn;
- (bool)_isTripledPunctuation;
- (id)_lastGrapheme;
- (unsigned int)_lastLongCharacter;
- (bool)_looksLikeEmailAddress;
- (bool)_looksLikeNumberInput;
- (bool)_looksLikeURL;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_rangeOfBackwardDeletionClusterAtIndex:(unsigned long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_rangeOfCharacterClusterAtIndex:(unsigned long long)arg1 withClusterOffset:(long long)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_rangeOfLongCharacterAtIndex:(unsigned long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_rangeOfString:(id)arg1 fromLocation:(unsigned long long)arg2;
- (void)_reverseEnumerateLongCharactersInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 usingBlock:(id /* block */)arg2;
- (bool)_shouldBePaddedWithSpaces;
- (id)_stringByApplyingTransform:(id)arg1;
- (id)_stringByComposingDiacriticsLogicalOrder:(bool)arg1 allowedCharacters:(id /* block */)arg2;
- (id)_stringByConvertingFromFullWidthToHalfWidth;
- (id)_stringByConvertingFromHalfWidthToFullWidth;
- (id)_stringByReplacingCharacter:(unsigned int)arg1 withCharacter:(unsigned int)arg2;
- (id)_stringByReplacingCharactersInSet:(struct __CFCharacterSet { }*)arg1 withCharacter:(unsigned int)arg2;
- (id)_stringByTranscribingFromLanguage:(id)arg1;
- (id)_stringByTranscribingUsingTokenizer:(struct __CFStringTokenizer { }*)arg1;
- (id)_stringByTransliteratingToPinyin;
- (id)_stringByTransliteratingToPinyin:(bool)arg1;
- (id)_stringByTransliteratingToPinyinAsFamilyName;
- (id)_stringByTransliteratingToZhuyin;
- (id)_stringByTransliteratingToZhuyin:(bool)arg1;
- (id)_stringByTransliteratingToZhuyinAsFamilyName;
- (id)_stringByTrimmingCharactersInCFCharacterSet:(struct __CFCharacterSet { }*)arg1;
- (id)_stringByTrimmingLastCharacter;
- (bool)_ti_isKeyEquivalentMirroringCandidate;
- (id)_ti_keyEquivalentMirroring;
- (unsigned short)_ti_supplementalPrefixOfLastToken:(id)arg1;
- (bool)containsSubstring:(id)arg1;
- (unsigned long long)editDistanceFrom:(id)arg1;
- (bool)endsSentence;
- (bool)isDelete;
- (bool)isLeftAssociative;
- (bool)isNaturallyRTL;
- (bool)isNewlineOrReturn;
- (bool)isPlainSpace;
- (bool)isSpace;
- (bool)isSpaceOrReturn;
- (bool)isTripledPunctuation;
- (bool)looksLikeEmailAddress;
- (bool)looksLikeNumberInput;
- (bool)looksLikeURL;
- (id)stringByReplacingCharacter:(unsigned int)arg1 withCharacter:(unsigned int)arg2;
- (id)stringByReplacingCharactersInSet:(struct __CFCharacterSet { }*)arg1 withCharacter:(unsigned int)arg2;
- (id)stringByTrimmingCharactersInCFCharacterSet:(struct __CFCharacterSet { }*)arg1;
- (id)stringByTrimmingLastCharacter;

// Image: /System/Library/PrivateFrameworks/Trial.framework/Trial

+ (id)triHashStrings:(id)arg1 withDataSalt:(id)arg2;

- (id)triHashWithDataSalt:(id)arg1;
- (id)triHashWithIntegerSalt:(unsigned long long)arg1;
- (bool)triIsPathSafe;
- (bool)triIsPathSafePlausibleUniqueId;
- (unsigned long long)triJavaHash;
- (id)triSanitizedPathComponentWithMaxLength:(unsigned long long)arg1 addHash:(bool)arg2 error:(id*)arg3;
- (id)triStringByResolvingSymlinksInPath;
- (id)triTrim;

// Image: /System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation

+ (double)defaultBaselineOffsetForFont:(id)arg1;
+ (double)defaultLineHeightForFont:(id)arg1;
+ (float)hyphenationFactor;
+ (void)setHyphenationFactor:(float)arg1;
+ (void)setShowsControlCharacters:(bool)arg1;
+ (void)setShowsInvisibleCharacters:(bool)arg1;
+ (void)setTypesetterBehavior:(long long)arg1;
+ (void)setUsesFontLeading:(bool)arg1;
+ (void)setUsesScreenFonts:(bool)arg1;
+ (bool)showsControlCharacters;
+ (bool)showsInvisibleCharacters;
+ (long long)typesetterBehavior;
+ (bool)usesFontLeading;
+ (bool)usesScreenFonts;

- (struct CGSize { double x1; double x2; })_sizeWithSize:(struct CGSize { double x1; double x2; })arg1 attributes:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundingRectWithSize:(struct CGSize { double x1; double x2; })arg1 options:(long long)arg2 attributes:(id)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundingRectWithSize:(struct CGSize { double x1; double x2; })arg1 options:(long long)arg2 attributes:(id)arg3 context:(id)arg4;
- (void)drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 withAttributes:(id)arg2;
- (void)drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withAttributes:(id)arg2;
- (void)drawWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 options:(long long)arg2 attributes:(id)arg3;
- (void)drawWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 options:(long long)arg2 attributes:(id)arg3 context:(id)arg4;
- (bool)hasColorGlyphsInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 attributes:(id)arg2;
- (struct CGSize { double x1; double x2; })sizeWithAttributes:(id)arg1;
- (id)stringByStrippingLeadingAndTrailingWhitespaceAndQuotes;

// Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore

- (id)_asMenuElementImage;
- (id)_asMenuElementImageName;
- (struct CGSize { double x1; double x2; })_drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(long long)arg3 alignment:(long long)arg4 lineSpacing:(int)arg5 includeEmoji:(bool)arg6 truncationRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg7;
- (id)_initWithUTF8String:(const char *)arg1 maxLength:(unsigned long long)arg2;
- (struct CGSize { double x1; double x2; })_legacy_drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 fontSize:(double)arg4 lineBreakMode:(long long)arg5 baselineAdjustment:(long long)arg6;
- (struct CGSize { double x1; double x2; })_legacy_drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 fontSize:(double)arg4 lineBreakMode:(long long)arg5 baselineAdjustment:(long long)arg6 includeEmoji:(bool)arg7;
- (struct CGSize { double x1; double x2; })_legacy_drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 lineBreakMode:(long long)arg4;
- (struct CGSize { double x1; double x2; })_legacy_drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 lineBreakMode:(long long)arg4 letterSpacing:(double)arg5;
- (struct CGSize { double x1; double x2; })_legacy_drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 lineBreakMode:(long long)arg4 letterSpacing:(double)arg5 includeEmoji:(bool)arg6;
- (struct CGSize { double x1; double x2; })_legacy_drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 minFontSize:(double)arg4 actualFontSize:(double*)arg5 lineBreakMode:(long long)arg6 baselineAdjustment:(long long)arg7;
- (struct CGSize { double x1; double x2; })_legacy_drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 minFontSize:(double)arg4 actualFontSize:(double*)arg5 lineBreakMode:(long long)arg6 baselineAdjustment:(long long)arg7 includeEmoji:(bool)arg8;
- (struct CGSize { double x1; double x2; })_legacy_drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 withFont:(id)arg2;
- (struct CGSize { double x1; double x2; })_legacy_drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withFont:(id)arg2;
- (struct CGSize { double x1; double x2; })_legacy_drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(long long)arg3;
- (struct CGSize { double x1; double x2; })_legacy_drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(long long)arg3 alignment:(long long)arg4;
- (struct CGSize { double x1; double x2; })_legacy_drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(long long)arg3 alignment:(long long)arg4 lineSpacing:(int)arg5;
- (struct CGSize { double x1; double x2; })_legacy_drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(long long)arg3 alignment:(long long)arg4 lineSpacing:(int)arg5 includeEmoji:(bool)arg6;
- (struct CGSize { double x1; double x2; })_legacy_drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(long long)arg3 alignment:(long long)arg4 lineSpacing:(int)arg5 includeEmoji:(bool)arg6 truncationRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg7;
- (struct CGSize { double x1; double x2; })_legacy_sizeWithFont:(id)arg1;
- (struct CGSize { double x1; double x2; })_legacy_sizeWithFont:(id)arg1 constrainedToSize:(struct CGSize { double x1; double x2; })arg2;
- (struct CGSize { double x1; double x2; })_legacy_sizeWithFont:(id)arg1 constrainedToSize:(struct CGSize { double x1; double x2; })arg2 lineBreakMode:(long long)arg3;
- (struct CGSize { double x1; double x2; })_legacy_sizeWithFont:(id)arg1 constrainedToSize:(struct CGSize { double x1; double x2; })arg2 lineBreakMode:(long long)arg3 lineSpacing:(int)arg4;
- (struct CGSize { double x1; double x2; })_legacy_sizeWithFont:(id)arg1 forWidth:(double)arg2 lineBreakMode:(long long)arg3;
- (struct CGSize { double x1; double x2; })_legacy_sizeWithFont:(id)arg1 forWidth:(double)arg2 lineBreakMode:(long long)arg3 letterSpacing:(double)arg4;
- (struct CGSize { double x1; double x2; })_legacy_sizeWithFont:(id)arg1 minFontSize:(double)arg2 actualFontSize:(double*)arg3 forWidth:(double)arg4 lineBreakMode:(long long)arg5;
- (struct CGSize { double x1; double x2; })_optimizedSizeWithFont:(id)arg1;
- (id)_uikit_stringByRemovingFirstMatchFromPrefixes:(id)arg1;
- (id)_uikit_stringByTrimmingWhitespaceAndNewlines;
- (id)_uikit_stringWithWritingDirection:(long long)arg1 asOverride:(bool)arg2;
- (id)_uikit_unescapedQueryValue;
- (struct CGSize { double x1; double x2; })drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 fontSize:(double)arg4 lineBreakMode:(long long)arg5 baselineAdjustment:(long long)arg6;
- (struct CGSize { double x1; double x2; })drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 fontSize:(double)arg4 lineBreakMode:(long long)arg5 baselineAdjustment:(long long)arg6 includeEmoji:(bool)arg7;
- (struct CGSize { double x1; double x2; })drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 lineBreakMode:(long long)arg4;
- (struct CGSize { double x1; double x2; })drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 lineBreakMode:(long long)arg4 letterSpacing:(double)arg5;
- (struct CGSize { double x1; double x2; })drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 lineBreakMode:(long long)arg4 letterSpacing:(double)arg5 includeEmoji:(bool)arg6;
- (struct CGSize { double x1; double x2; })drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 minFontSize:(double)arg4 actualFontSize:(double*)arg5 lineBreakMode:(long long)arg6 baselineAdjustment:(long long)arg7;
- (struct CGSize { double x1; double x2; })drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 minFontSize:(double)arg4 actualFontSize:(double*)arg5 lineBreakMode:(long long)arg6 baselineAdjustment:(long long)arg7 includeEmoji:(bool)arg8;
- (struct CGSize { double x1; double x2; })drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 withFont:(id)arg2;
- (struct CGSize { double x1; double x2; })drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withFont:(id)arg2;
- (struct CGSize { double x1; double x2; })drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(long long)arg3;
- (struct CGSize { double x1; double x2; })drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(long long)arg3 alignment:(long long)arg4;
- (struct CGSize { double x1; double x2; })drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(long long)arg3 alignment:(long long)arg4 lineSpacing:(int)arg5;
- (struct CGSize { double x1; double x2; })drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(long long)arg3 alignment:(long long)arg4 lineSpacing:(int)arg5 includeEmoji:(bool)arg6;
- (id)queryKeysAndValues;
- (struct CGSize { double x1; double x2; })sizeWithFont:(id)arg1;
- (struct CGSize { double x1; double x2; })sizeWithFont:(id)arg1 constrainedToSize:(struct CGSize { double x1; double x2; })arg2;
- (struct CGSize { double x1; double x2; })sizeWithFont:(id)arg1 constrainedToSize:(struct CGSize { double x1; double x2; })arg2 lineBreakMode:(long long)arg3;
- (struct CGSize { double x1; double x2; })sizeWithFont:(id)arg1 constrainedToSize:(struct CGSize { double x1; double x2; })arg2 lineBreakMode:(long long)arg3 lineSpacing:(int)arg4;
- (struct CGSize { double x1; double x2; })sizeWithFont:(id)arg1 forWidth:(double)arg2 lineBreakMode:(long long)arg3;
- (struct CGSize { double x1; double x2; })sizeWithFont:(id)arg1 forWidth:(double)arg2 lineBreakMode:(long long)arg3 letterSpacing:(double)arg4;
- (struct CGSize { double x1; double x2; })sizeWithFont:(id)arg1 minFontSize:(double)arg2 actualFontSize:(double*)arg3 forWidth:(double)arg4 lineBreakMode:(long long)arg5;

// Image: /System/Library/PrivateFrameworks/URLFormatting.framework/URLFormatting

+ (void)_lp_reverseEnumerateComponents:(id)arg1 usingBlock:(id /* block */)arg2;

- (bool)_lp_hasCaseInsensitivePrefix:(id)arg1;
- (bool)_lp_hasCaseInsensitiveSubstring:(id)arg1 startingAt:(unsigned long long)arg2;
- (id)_lp_highLevelDomainFromComponents:(id)arg1 indexOfFirstHighLevelDomainComponent:(unsigned long long*)arg2 indexOfFirstTopLevelDomainComponent:(unsigned long long*)arg3;
- (id)_lp_highLevelDomainFromHost;
- (id)_lp_hostByStrippingTopLevelDomain;
- (unsigned long long)_lp_lengthOfDeepSubdomainsFromComponents:(id)arg1;
- (id)_lp_simplifiedUserVisibleURLStringWithSimplifications:(unsigned long long)arg1 forDisplayOnly:(bool)arg2;
- (id)_lp_stringByDeletingTrailingSlash;
- (id)_lp_stringByDeletingUsernameAndPassword;
- (id)_lp_stringByTrimmingWhitespace;
- (id)_lp_stringForcingLeftToRightDirection;
- (id)_lp_userVisibleHost;

// Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit

- (id)_vk_internedString;

// Image: /System/Library/PrivateFrameworks/VoiceServices.framework/VoiceServices

+ (unsigned long long)_vs_countPhoneticSyllables_lhp:(id)arg1;
+ (unsigned long long)_vs_countPhoneticSyllables_xsampa:(id)arg1;
+ (bool)vs_isCJKCharacter:(unsigned short)arg1;
+ (id)vs_markerStringForContext:(id)arg1;
+ (id)vs_stringFrom4CC:(int)arg1;

- (id)preinstalledAudioHashForLanguage:(id)arg1 name:(id)arg2;
- (id)sha256hex;
- (id)vs_convertToSSML;
- (unsigned long long)vs_countPhoneticSyllables;
- (bool)vs_hasCJKCharacter;
- (id)vs_insertContextInfo:(id)arg1;
- (double)vs_measurePauses;
- (id)vs_removePhonetics;
- (id)vs_removeSpeechTags;
- (id)vs_substituteAudioWithLocalPath;
- (id)vs_textifyEmojiWithLanguage:(id)arg1;

// Image: /System/Library/PrivateFrameworks/WebCore.framework/Frameworks/libwebrtc.dylib

+ (struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *x_1_4_1; unsigned long long x_1_4_2; unsigned long long x_1_4_3; } x_1_3_1; struct __short { BOOL x_2_4_1[23]; struct { unsigned char x_2_5_1; } x_2_4_2; } x_1_3_2; struct __raw { unsigned long long x_3_4_1[3]; } x_1_3_3; } x_1_2_1; } x_1_1_1; } x1; })stdStringForString:(id)arg1;
+ (id)stringForStdString:(const void*)arg1;

- (struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *x_1_4_1; unsigned long long x_1_4_2; unsigned long long x_1_4_3; } x_1_3_1; struct __short { BOOL x_2_4_1[23]; struct { unsigned char x_2_5_1; } x_2_4_2; } x_1_3_2; struct __raw { unsigned long long x_3_4_1[3]; } x_1_3_3; } x_1_2_1; } x_1_1_1; } x1; })stdString;

// Image: /System/Library/PrivateFrameworks/WebKitLegacy.framework/WebKitLegacy

+ (id)_webkit_localCacheDirectoryWithBundleIdentifier:(id)arg1;

- (id)_web_bestURLForUserTypedString;
- (id)_web_capitalizeRFC822HeaderFieldName;
- (id)_web_decodeHostName;
- (id)_web_encodeHostName;
- (bool)_web_isUserVisibleURL;
- (id)_web_possibleURLPrefixesForUserTypedString;
- (id)_web_possibleURLsForForUserTypedString:(bool)arg1;
- (id)_web_possibleURLsForUserTypedString;
- (id)_web_stringByAbbreviatingWithTildeInPath;
- (id)_webkit_decodeHostName;
- (id)_webkit_encodeHostName;
- (id)_webkit_filenameByFixingIllegalCharacters;
- (bool)_webkit_hasCaseInsensitivePrefix:(id)arg1;
- (bool)_webkit_hasCaseInsensitiveSuffix:(id)arg1;
- (bool)_webkit_isCaseInsensitiveEqualToString:(id)arg1;
- (bool)_webkit_isFileURL;
- (bool)_webkit_isJavaScriptURL;
- (bool)_webkit_looksLikeAbsoluteURL;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_webkit_rangeOfURLScheme;
- (id)_webkit_scriptIfJavaScriptURL;
- (id)_webkit_stringByReplacingValidPercentEscapes;
- (id)_webkit_stringByTrimmingWhitespace;

// Image: /usr/lib/libprequelite.dylib

+ (id)newFromSqliteStatement:(struct sqlite3_stmt { }*)arg1 atIndex:(int)arg2;
+ (id)newFromSqliteValue:(struct sqlite3_value { }*)arg1;

- (void)sqliteBind:(struct sqlite3_stmt { }*)arg1 index:(int)arg2;

@end
