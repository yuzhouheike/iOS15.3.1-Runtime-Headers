/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore
 */

@interface _UIImageCUIVectorGlyphContent : _UIImageContent {
    double  _glyphScaleFactor;
    _Atomic id  _isMultiColor;
    _Atomic id  _numberOfHierarchyLayers;
    struct CGImage { } * _overrideImageRef;
    struct CGSize { 
        double width; 
        double height; 
    }  _sizeInPixels;
    _UIImageContent * _vectorContent;
    CUINamedVectorGlyph * _vectorGlyph;
    double  _vectorScale;
}

@property (nonatomic) double glyphScaleFactor;

- (void).cxx_destruct;
- (struct CGImage { }*)CGImage;
- (bool)_canProvideCGImageDirectly;
- (void)_drawWithoutEffectInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 context:(struct CGContext { }*)arg2;
- (void)_prepareforDrawingInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 context:(struct CGContext { }*)arg2;
- (struct CGImage { }*)_provideCGImageWithSize:(struct CGSize { double x1; double x2; })arg1 scale:(double)arg2;
- (struct CGImage { }*)_provideCGImageWithSize:(struct CGSize { double x1; double x2; })arg1 scale:(double)arg2 hierarchicalColorResolver:(id /* block */)arg3;
- (struct CGImage { }*)_provideCGImageWithSize:(struct CGSize { double x1; double x2; })arg1 scale:(double)arg2 namedColorResolver:(id /* block */)arg3;
- (struct CGImage { }*)_provideCGImageWithSize:(struct CGSize { double x1; double x2; })arg1 scale:(double)arg2 paletteColors:(id)arg3;
- (bool)canDrawImage;
- (bool)canScaleImageToTargetResolution;
- (bool)containsNamedColorStyle:(id)arg1;
- (bool)containsNamedColorStyles;
- (id)contentWithCGImage:(struct CGImage { }*)arg1;
- (void)dealloc;
- (id)description;
- (double)glyphScaleFactor;
- (unsigned long long)hash;
- (id)initWithCUIVectorGlyph:(id)arg1 scale:(double)arg2;
- (id)initWithScale:(double)arg1;
- (bool)isCGImage;
- (bool)isEqual:(id)arg1;
- (bool)isVectorGlyph;
- (unsigned long long)numberOfHierarchyLayers;
- (id)outlinePath;
- (void)setGlyphScaleFactor:(double)arg1;
- (struct CGSize { double x1; double x2; })sizeInPixels;
- (id)vectorGlyph;
- (double)vectorScale;

@end
