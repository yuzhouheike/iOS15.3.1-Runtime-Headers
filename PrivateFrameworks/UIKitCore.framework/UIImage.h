/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore
 */

@interface UIImage : NSObject <DebugHierarchyValue_Fallback, MKArtworkImageSource, NSCopying, NSItemProviderReading, NSItemProviderWriting, NSSecureCoding, UIItemProviderPresentationSizeProviding, UIItemProviderReading, UIItemProviderWriting, _UIMenuImageOrName> {
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _alignmentRectInsets;
    double  _baselineOffsetFromBottom;
    double  _capHeight;
    UIImageConfiguration * _configuration;
    _UIImageContent * _content;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _contentInsets;
    UIImageAsset * _imageAsset;
    struct { 
        unsigned int named : 1; 
        unsigned int asksContentForImageOrientation : 1; 
        unsigned int imageOrientation : 3; 
        unsigned int cached : 1; 
        unsigned int hasPattern : 1; 
        unsigned int isCIImage : 1; 
        unsigned int renderingMode : 2; 
        unsigned int suppressesAccessibilityHairlineThickening : 1; 
        unsigned int isSymbolConfiguration : 1; 
        unsigned int hasBaseline : 1; 
        unsigned int isBaselineExplicit : 1; 
        unsigned int areContentInsetsExplicit : 1; 
        unsigned int areAlignmentRectInsetsExplicit : 1; 
        unsigned int flipsForRightToLeftLayoutDirection : 1; 
        unsigned int hasCapHeight : 1; 
    }  _imageFlags;
    NSMapTable * _siblingImages;
    struct CGSize { 
        double width; 
        double height; 
    }  _sizeInPixels;
}

@property (nonatomic, readonly) struct CGImage { }*CGImage;
@property (getter=_CGPDFPage, nonatomic, readonly) struct CGPDFPage { }*CGPDFPage;
@property (getter=_CGSVGDocument, nonatomic, readonly) struct CGSVGDocument { }*CGSVGDocument;
@property (nonatomic, readonly) CIImage *CIImage;
@property (nonatomic, readonly) UIImage *_asMenuElementImage;
@property (nonatomic, readonly) NSString *_asMenuElementImageName;
@property (nonatomic, readonly) double _capHeight;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } _contentInsets;
@property (nonatomic, readonly) bool _hasContentInsets;
@property (setter=_setSubimageInsets:, nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } _subimageInsets;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } alignmentRectInsets;
@property (nonatomic, readonly) double baselineOffsetFromBottom;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } capInsets;
@property (nonatomic, readonly, copy) UIImageConfiguration *configuration;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) double duration;
@property (nonatomic, readonly) bool flipsForRightToLeftLayoutDirection;
@property (getter=isFromStatusBarImageProvider, nonatomic, readonly) bool fromStatusBarImageProvider;
@property (nonatomic, readonly) bool hasBaseline;
@property (readonly) unsigned long long hash;
@property (setter=_setImageAsset:, nonatomic, retain) UIImageAsset *imageAsset;
@property (nonatomic, readonly) long long imageOrientation;
@property (nonatomic, readonly) UIGraphicsImageRendererFormat *imageRendererFormat;
@property (nonatomic, readonly) NSArray *images;
@property (nonatomic, readonly) long long leftCapWidth;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } preferredPresentationSizeForItemProvider;
@property (nonatomic, readonly) long long renderingMode;
@property (nonatomic, readonly) long long resizingMode;
@property (nonatomic, readonly) double scale;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } size;
@property (readonly) Class superclass;
@property (nonatomic, readonly, copy) UIImageSymbolConfiguration *symbolConfiguration;
@property (getter=isSymbolImage, nonatomic, readonly) bool symbolImage;
@property (nonatomic, readonly) long long topCapHeight;
@property (nonatomic, readonly, copy) UITraitCollection *traitCollection;
@property (nonatomic, readonly, copy) NSArray *writableTypeIdentifiersForItemProvider;

// Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore

+ (id)__systemImageNamed:(id)arg1;
+ (id)__systemImageNamed:(id)arg1 compatibleWithTraitCollection:(id)arg2;
+ (id)__systemImageNamed:(id)arg1 withConfiguration:(id)arg2;
+ (id)__systemImageNamedSwift:(id)arg1;
+ (id)_animatedImageNamed:(id)arg1 inBundle:(id)arg2 compatibleWithTraitCollection:(id)arg3 duration:(double)arg4;
+ (id)_animatedResizableImageNamed:(id)arg1 inBundle:(id)arg2 compatibleWithTraitCollection:(id)arg3 capInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg4 resizingMode:(long long)arg5 duration:(double)arg6;
+ (id)_applicationIconImageForBundleIdentifier:(id)arg1 format:(int)arg2;
+ (id)_applicationIconImageForBundleIdentifier:(id)arg1 format:(int)arg2 scale:(double)arg3;
+ (struct CGSize { double x1; double x2; })_applyOrientation:(long long)arg1 toContentSizeInPixels:(struct CGSize { double x1; double x2; })arg2;
+ (id)_backgroundGradientWithStartColor:(id)arg1 andEndColor:(id)arg2;
+ (id)_cachedImageForKey:(id)arg1 fromBlock:(id /* block */)arg2;
+ (void)_clearAssetCaches;
+ (id)_defaultBackgroundGradient;
+ (id)_deviceSpecificImageNamed:(id)arg1;
+ (id)_deviceSpecificImageNamed:(id)arg1 inBundle:(id)arg2;
+ (void)_dropResourceReferencesForURL:(id)arg1;
+ (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_edgeInsetsForStylePresetNames:(id)arg1 scale:(double)arg2 traitCollection:(id)arg3;
+ (void)_flushCache:(id)arg1;
+ (void)_flushSharedImageCache;
+ (id)_generateCompositedSymbolImageForAsset:(id)arg1 usingLayers:(id)arg2 configuration:(id)arg3 alignUsingBaselines:(bool)arg4;
+ (id)_iconForResourceProxy:(id)arg1 format:(int)arg2;
+ (id)_iconForResourceProxy:(id)arg1 format:(int)arg2 options:(unsigned long long)arg3;
+ (id)_iconForResourceProxy:(id)arg1 variant:(int)arg2 options:(int)arg3 variantsScale:(double)arg4;
+ (id)_iconForResourceProxy:(id)arg1 variant:(int)arg2 variantsScale:(double)arg3;
+ (int)_iconVariantForUIApplicationIconFormat:(int)arg1 idiom:(long long)arg2 scale:(double*)arg3;
+ (int)_iconVariantForUIApplicationIconFormat:(int)arg1 scale:(double*)arg2;
+ (long long)_idiomDefinedByPath:(id)arg1;
+ (id)_imageNamed:(id)arg1 withTrait:(id)arg2;
+ (id)_imageWithCGPDFPage:(struct CGPDFPage { }*)arg1;
+ (id)_imageWithCGPDFPage:(struct CGPDFPage { }*)arg1 scale:(double)arg2 orientation:(long long)arg3;
+ (id)_imageWithCGSVGDocument:(struct CGSVGDocument { }*)arg1;
+ (id)_imageWithCGSVGDocument:(struct CGSVGDocument { }*)arg1 scale:(double)arg2 orientation:(long long)arg3;
+ (bool)_isCGImageAlphaMask:(struct CGImage { }*)arg1;
+ (id)_kitImageNamed:(id)arg1 withTrait:(id)arg2;
+ (struct CGSize { double x1; double x2; })_legibilityImageSizeForSize:(struct CGSize { double x1; double x2; })arg1 style:(long long)arg2;
+ (void)_loadImageFromURL:(id)arg1 completionHandler:(id /* block */)arg2;
+ (long long)_mirroredImageOrientationForOrientation:(long long)arg1;
+ (id)_noiseImage;
+ (unsigned long long)_scaleDefinedByPath:(id)arg1;
+ (id)_systemActionsImage;
+ (id)_systemActionsImageWithConfiguration:(id)arg1;
+ (id)_systemAddImage;
+ (id)_systemAddImageWithColor:(id)arg1;
+ (id)_systemAddImageWithConfiguration:(id)arg1;
+ (id)_systemCameraImage;
+ (id)_systemCameraImageWithConfiguration:(id)arg1;
+ (id)_systemCloseImage;
+ (id)_systemCloseImageCompatibleWithTraitCollection:(id)arg1;
+ (id)_systemCloseImageWithConfiguration:(id)arg1;
+ (id)_systemImageNamed:(id)arg1;
+ (id)_systemImageNamed:(id)arg1 fallback:(id)arg2;
+ (id)_systemImageNamed:(id)arg1 fallback:(id)arg2 withConfiguration:(id)arg3;
+ (id)_systemImageNamed:(id)arg1 shape:(long long)arg2;
+ (id)_systemImageNamed:(id)arg1 shape:(long long)arg2 fill:(long long)arg3;
+ (id)_systemImageNamed:(id)arg1 shape:(long long)arg2 fill:(long long)arg3 withConfiguration:(id)arg4;
+ (id)_systemImageNamed:(id)arg1 variant:(unsigned long long)arg2;
+ (id)_systemImageNamed:(id)arg1 variant:(unsigned long long)arg2 withConfiguration:(id)arg3;
+ (id)_systemImageNamed:(id)arg1 withConfiguration:(id)arg2;
+ (id)_systemImageNamed:(id)arg1 withConfiguration:(id)arg2 allowPrivate:(bool)arg3;
+ (id)_systemRemoveImage;
+ (id)_systemRemoveImageWithColor:(id)arg1;
+ (id)_systemRemoveImageWithConfiguration:(id)arg1;
+ (id)_tintedImageForSize:(struct CGSize { double x1; double x2; })arg1 withTint:(id)arg2 effectsImage:(id)arg3 maskImage:(id)arg4 style:(int)arg5;
+ (id)_tintedImageForSize:(struct CGSize { double x1; double x2; })arg1 withTint:(id)arg2 maskImage:(id)arg3 effectsImage:(id)arg4 style:(int)arg5;
+ (id)_tintedImageForSize:(struct CGSize { double x1; double x2; })arg1 withTint:(id)arg2 maskImage:(id)arg3 effectsImage:(id)arg4 style:(int)arg5 edgeInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg6;
+ (id)actionsImage;
+ (id)actionsImageWithConfiguration:(id)arg1;
+ (id)addImage;
+ (id)addImageWithConfiguration:(id)arg1;
+ (id)animatedImageNamed:(id)arg1 duration:(double)arg2;
+ (id)animatedImageWithImages:(id)arg1 duration:(double)arg2;
+ (id)animatedResizableImageNamed:(id)arg1 capInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2 duration:(double)arg3;
+ (id)animatedResizableImageNamed:(id)arg1 capInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2 resizingMode:(long long)arg3 duration:(double)arg4;
+ (id)checkmarkImage;
+ (id)checkmarkImageWithConfiguration:(id)arg1;
+ (id)imageAtPath:(id)arg1;
+ (id)imageFromAlbumArtData:(id)arg1 height:(int)arg2 width:(int)arg3 bytesPerRow:(int)arg4 cache:(bool)arg5;
+ (id)imageNamed:(id)arg1;
+ (id)imageNamed:(id)arg1 inBundle:(id)arg2;
+ (id)imageNamed:(id)arg1 inBundle:(id)arg2 compatibleWithTraitCollection:(id)arg3;
+ (id)imageNamed:(id)arg1 inBundle:(id)arg2 withConfiguration:(id)arg3;
+ (id)imageNamed:(id)arg1 withConfiguration:(id)arg2;
+ (id)imageWithCGImage:(struct CGImage { }*)arg1;
+ (id)imageWithCGImage:(struct CGImage { }*)arg1 scale:(double)arg2 orientation:(long long)arg3;
+ (id)imageWithCIImage:(id)arg1;
+ (id)imageWithCIImage:(id)arg1 scale:(double)arg2 orientation:(long long)arg3;
+ (id)imageWithContentsOfCPBitmapFile:(id)arg1 flags:(int)arg2;
+ (id)imageWithContentsOfFile:(id)arg1;
+ (id)imageWithData:(id)arg1;
+ (id)imageWithData:(id)arg1 scale:(double)arg2;
+ (void)initialize;
+ (id)kitImageNamed:(id)arg1;
+ (id)objectWithItemProviderData:(id)arg1 typeIdentifier:(id)arg2 error:(id*)arg3;
+ (id)preferredSymbolImageNamed:(id)arg1;
+ (id)preferredSymbolImageNamed:(id)arg1 size:(long long)arg2 compatibleWithTextStyle:(id)arg3;
+ (id)preferredSymbolImageNamed:(id)arg1 size:(long long)arg2 compatibleWithTextStyle:(id)arg3 traitCollection:(id)arg4 inBundle:(id)arg5;
+ (id)readableTypeIdentifiersForItemProvider;
+ (id)removeImage;
+ (id)removeImageWithConfiguration:(id)arg1;
+ (id)strokedCheckmarkImage;
+ (id)strokedCheckmarkImageWithConfiguration:(id)arg1;
+ (bool)supportsSecureCoding;
+ (id)symbolImageNamed:(id)arg1;
+ (id)symbolImageNamed:(id)arg1 size:(long long)arg2 compatibleWithFont:(id)arg3;
+ (id)symbolImageNamed:(id)arg1 size:(long long)arg2 compatibleWithFont:(id)arg3 traitCollection:(id)arg4 inBundle:(id)arg5;
+ (id)symbolImageNamed:(id)arg1 size:(long long)arg2 weight:(long long)arg3 compatibleWithFontSize:(double)arg4;
+ (id)symbolImageNamed:(id)arg1 size:(long long)arg2 weight:(long long)arg3 compatibleWithFontSize:(double)arg4 traitCollection:(id)arg5 inBundle:(id)arg6;
+ (id)systemImageNamed:(id)arg1;
+ (id)systemImageNamed:(id)arg1 compatibleWithTraitCollection:(id)arg2;
+ (id)systemImageNamed:(id)arg1 withConfiguration:(id)arg2;
+ (id)writableTypeIdentifiersForItemProvider;

- (void).cxx_destruct;
- (struct CGImage { }*)CGImage;
- (id)CIImage;
- (struct CGPDFPage { }*)_CGPDFPage;
- (struct CGSize { double x1; double x2; })_CGPDFPageSize;
- (struct CGSVGDocument { }*)_CGSVGDocument;
- (struct CGSize { double x1; double x2; })_CGSVGDocumentSize;
- (double)__baselineOffsetFromBottom;
- (id)_applicationIconImageForFormat:(int)arg1 precomposed:(bool)arg2;
- (id)_applicationIconImageForFormat:(int)arg1 precomposed:(bool)arg2 idiom:(long long)arg3 scale:(double)arg4;
- (id)_applicationIconImageForFormat:(int)arg1 precomposed:(bool)arg2 scale:(double)arg3;
- (id)_applyBackdropViewSettings:(id)arg1;
- (id)_applyBackdropViewSettings:(id)arg1 allowImageResizing:(bool)arg2;
- (id)_applyBackdropViewSettings:(id)arg1 includeTints:(bool)arg2 includeBlur:(bool)arg3;
- (id)_applyBackdropViewSettings:(id)arg1 includeTints:(bool)arg2 includeBlur:(bool)arg3 allowImageResizing:(bool)arg4;
- (id)_applyBackdropViewStyle:(long long)arg1 includeTints:(bool)arg2 includeBlur:(bool)arg3;
- (id)_applyBackdropViewStyle:(long long)arg1 includeTints:(bool)arg2 includeBlur:(bool)arg3 graphicsQuality:(long long)arg4;
- (id)_applyBackdropViewStyle:(long long)arg1 includeTints:(bool)arg2 includeBlur:(bool)arg3 graphicsQuality:(long long)arg4 allowImageResizing:(bool)arg5;
- (id)_asMenuElementImage;
- (id)_asMenuElementImageName;
- (double)_baselineOffsetFromBottom;
- (id)_bezeledImageWithShadowRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4 fillRed:(double)arg5 green:(double)arg6 blue:(double)arg7 alpha:(double)arg8 drawShadow:(bool)arg9;
- (struct { double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; })_calculateEdgeStatistics;
- (struct { double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; })_calculateStatistics;
- (struct { double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; })_calculateStatisticsOfEdge:(bool)arg1;
- (bool)_canEncodeWithName:(id)arg1 coder:(id)arg2;
- (double)_capHeight;
- (id)_colorForFlattening;
- (void)_configureImage:(id)arg1 assumePreconfigured:(bool)arg2;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_contentInsets;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_contentRectInPixels;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_contentStretchInPixels;
- (struct __IOSurface { }*)_copyIOSurface;
- (id)_defaultConfiguration;
- (id)_doubleBezeledImageWithExteriorShadowRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4 interiorShadowRed:(double)arg5 green:(double)arg6 blue:(double)arg7 alpha:(double)arg8 fillRed:(double)arg9 green:(double)arg10 blue:(double)arg11 alpha:(double)arg12;
- (void)_drawImageForLegibilitySettings:(id)arg1 strength:(double)arg2 size:(struct CGSize { double x1; double x2; })arg3;
- (void)_drawImageForLegibilitySettings:(id)arg1 strength:(double)arg2 size:(struct CGSize { double x1; double x2; })arg3 alphaOnly:(bool)arg4;
- (void)_drawImageForLegibilityStyle:(long long)arg1 size:(struct CGSize { double x1; double x2; })arg2;
- (long long)_effectiveRenderingModeWithSymbolConfiguration:(id)arg1;
- (void)_encodeDataWithCoder:(id)arg1 imageName:(id)arg2;
- (void)_encodePropertiesWithCoder:(id)arg1;
- (id)_flatImageWithColor:(id)arg1;
- (id)_flatImageWithWhite:(double)arg1 alpha:(double)arg2;
- (id)_flattenedImageWithTintColor:(id)arg1;
- (void)_flipImageOrientationHorizontally;
- (bool)_hasBaseline;
- (bool)_hasContentInsets;
- (bool)_hasExplicitAlignmentRectInsets;
- (bool)_hasExplicitBaseline;
- (bool)_hasExplicitContentInsets;
- (bool)_hasVisibleContentInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 atScale:(double)arg2;
- (id)_identityDescription;
- (id)_imageByApplyingVariant:(unsigned long long)arg1 allowNone:(bool)arg2;
- (void)_imageByCreatingBitmapRepresentationWithCompletionHandler:(id /* block */)arg1;
- (id)_imageByResizingToSize:(struct CGSize { double x1; double x2; })arg1;
- (id)_imageForLegibilitySettings:(id)arg1 strength:(double)arg2;
- (id)_imageForLegibilitySettings:(id)arg1 strength:(double)arg2 alphaOnly:(bool)arg3;
- (id)_imageForLegibilityStyle:(long long)arg1;
- (long long)_imageOrientationConsideringRTL;
- (long long)_imageOrientationConsideringRTLForUserInterfaceLayoutDirection:(long long)arg1;
- (id)_imagePaddedByInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (id)_imagePreparedForScreen:(id)arg1;
- (id)_imageScaledToProportion:(double)arg1 interpolationQuality:(int)arg2;
- (id)_imageThatSuppressesAccessibilityHairlineThickening;
- (id)_imageTintedWithColor:(id)arg1 flatten:(bool)arg2 renderingMode:(long long)arg3 withUpdatedCGImage:(bool)arg4;
- (id)_imageWithBitmapRepresentation;
- (id)_imageWithBrightnessModifiedForLegibilityStyle:(long long)arg1;
- (id)_imageWithContent:(id)arg1;
- (id)_imageWithContentInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (id)_imageWithContentInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1 withUpdatedCGImage:(bool)arg2;
- (id)_imageWithImageAsset:(id)arg1;
- (id)_imageWithImageAsset:(id)arg1 configuration:(id)arg2;
- (id)_imageWithSize:(struct CGSize { double x1; double x2; })arg1;
- (id)_imageWithSize:(struct CGSize { double x1; double x2; })arg1 content:(id)arg2;
- (id)_imageWithStylePresets:(id)arg1 tintColor:(id)arg2 traitCollection:(id)arg3;
- (id)_imageWithSymbolMetricsFromNamedVectorGlyph:(id)arg1;
- (id)_initWithCGPDFPage:(struct CGPDFPage { }*)arg1;
- (id)_initWithCGPDFPage:(struct CGPDFPage { }*)arg1 scale:(double)arg2 orientation:(long long)arg3;
- (id)_initWithCGSVGDocument:(struct CGSVGDocument { }*)arg1;
- (id)_initWithCGSVGDocument:(struct CGSVGDocument { }*)arg1 scale:(double)arg2 orientation:(long long)arg3;
- (id)_initWithCompositedSymbolImageLayers:(id)arg1 name:(id)arg2;
- (id)_initWithCompositedSymbolImageLayers:(id)arg1 name:(id)arg2 alignUsingBaselines:(bool)arg3;
- (id)_initWithContent:(id)arg1 orientation:(long long)arg2;
- (id)_initWithContentsOfLCRFile:(id)arg1;
- (id)_initWithData:(id)arg1 immediateLoadWithMaxSize:(struct CGSize { double x1; double x2; })arg2 scale:(double)arg3 renderingIntent:(unsigned long long)arg4;
- (id)_initWithData:(id)arg1 immediateLoadWithMaxSize:(struct CGSize { double x1; double x2; })arg2 scale:(double)arg3 renderingIntent:(unsigned long long)arg4 cache:(bool)arg5;
- (id)_initWithData:(id)arg1 preserveScale:(bool)arg2;
- (id)_initWithData:(id)arg1 preserveScale:(bool)arg2 cache:(bool)arg3;
- (id)_initWithData:(id)arg1 preserveScale:(bool)arg2 cache:(bool)arg3 scale:(double)arg4;
- (id)_initWithData:(id)arg1 scale:(double)arg2;
- (id)_initWithFilledSystemImageNamed:(id)arg1 fillColor:(id)arg2;
- (id)_initWithFilledSystemImageNamed:(id)arg1 fillColor:(id)arg2 symbolColor:(id)arg3;
- (id)_initWithFilledSystemImageNamed:(id)arg1 fillColor:(id)arg2 symbolColor:(id)arg3 withName:(id)arg4;
- (id)_initWithIOSurface:(struct __IOSurface { }*)arg1 imageOrientation:(long long)arg2;
- (id)_initWithIOSurface:(struct __IOSurface { }*)arg1 scale:(double)arg2 orientation:(long long)arg3;
- (id)_initWithOtherImage:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_inverseAlignmentRectInsets;
- (bool)_isAlphaMask;
- (bool)_isCGImageOnly;
- (bool)_isCached;
- (bool)_isColoredSymbolImage;
- (bool)_isDecompressing;
- (bool)_isHierarchicalColorSymbolImage;
- (bool)_isInvisibleAndGetIsTranslucent:(bool*)arg1;
- (bool)_isMultiColorSymbolImage;
- (bool)_isNamed;
- (bool)_isPDFVector;
- (bool)_isRTLImage;
- (bool)_isResizable;
- (bool)_isSVGVector;
- (bool)_isSubimage;
- (bool)_isSymbolImage;
- (bool)_isTiledWhenStretchedToSize:(struct CGSize { double x1; double x2; })arg1;
- (id)_metricsDescription;
- (unsigned long long)_numberOfHierarchyLayers;
- (id)_outlinePath;
- (void)_preheatBitmapData;
- (void)_prepareForScreen:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)_primitiveImageAsset;
- (bool)_probeIsSeeThrough;
- (id)_rasterizedImage;
- (void)_removeBaseline;
- (void)_removeBaselineExplicitly;
- (bool)_representsCIImageWhichSupportsIOSurfaceRendering;
- (bool)_representsLayeredImage;
- (id)_resizableImageWithCapMask:(int)arg1;
- (id)_resizableImageWithSubimageInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1 resizeInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2;
- (double)_scaleFromPDF;
- (id)_serializedData;
- (void)_setAlignmentRectInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setAlignmentRectInsetsExplicitly:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setAlwaysStretches:(bool)arg1;
- (void)_setBaselineOffsetFromBottom:(double)arg1;
- (void)_setBaselineOffsetFromBottomExplicitly:(double)arg1;
- (void)_setCached:(bool)arg1;
- (void)_setCapHeight:(double)arg1;
- (void)_setCapInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setColorForFlattening:(id)arg1;
- (void)_setConfiguration:(id)arg1;
- (void)_setContentInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setContentInsetsExplicitly:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setImageAsset:(id)arg1;
- (void)_setIsFlippedInRightToLeft;
- (void)_setMidlineOffsetFromCenter:(double)arg1;
- (void)_setNamed:(bool)arg1;
- (void)_setRenderingMode:(long long)arg1;
- (void)_setSubimageInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setSuppressesAccessibilityHairlineThickening:(bool)arg1;
- (void)_setSymbolMetricsFromNamedVectorGlyph:(id)arg1;
- (struct CGSize { double x1; double x2; })_sizeInPixels;
- (struct CGSize { double x1; double x2; })_sizeInPixelsFromPDF;
- (struct CGSize { double x1; double x2; })_sizeWithHairlineThickening:(bool)arg1 renderingEffects:(unsigned long long)arg2 forTraitCollection:(id)arg3;
- (id)_stretchableImageWithCapInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_subimageInsets;
- (bool)_suppressesAccessibilityHairlineThickening;
- (id)_swizzleContent:(id)arg1;
- (struct CGColor { }*)_tiledPatternColor;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })alignmentRectInsets;
- (double)baselineOffsetFromBottom;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })capInsets;
- (void)compositeToPoint:(struct CGPoint { double x1; double x2; })arg1 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 operation:(int)arg3 fraction:(double)arg4;
- (void)compositeToPoint:(struct CGPoint { double x1; double x2; })arg1 operation:(int)arg2;
- (void)compositeToPoint:(struct CGPoint { double x1; double x2; })arg1 operation:(int)arg2 fraction:(double)arg3;
- (void)compositeToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 operation:(int)arg3 fraction:(double)arg4;
- (id)configuration;
- (id)content;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })contentInsets;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (void)draw1PartImageInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)draw1PartImageInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fraction:(double)arg2;
- (void)draw1PartImageInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fraction:(double)arg2 operation:(int)arg3;
- (void)draw3PartImageWithSliceRects:(struct { struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_2_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_2_1_2; } x2; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_3_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_3_1_2; } x3; })arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)draw3PartImageWithSliceRects:(struct { struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_2_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_2_1_2; } x2; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_3_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_3_1_2; } x3; })arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 fraction:(double)arg3;
- (void)draw3PartImageWithSliceRects:(struct { struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_2_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_2_1_2; } x2; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_3_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_3_1_2; } x3; })arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 operation:(int)arg3 fraction:(double)arg4;
- (void)draw9PartImageWithSliceRects:(struct { struct { struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_1_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_1_2_2; } x_1_1_1; struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_2_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_2_2_2; } x_1_1_2; struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_3_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_3_2_2; } x_1_1_3; } x1; struct { struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_1_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_1_2_2; } x_2_1_1; struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_2_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_2_2_2; } x_2_1_2; struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_3_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_3_2_2; } x_2_1_3; } x2; struct { struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_1_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_1_2_2; } x_3_1_1; struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_2_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_2_2_2; } x_3_1_2; struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_3_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_3_2_2; } x_3_1_3; } x3; })arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)draw9PartImageWithSliceRects:(struct { struct { struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_1_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_1_2_2; } x_1_1_1; struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_2_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_2_2_2; } x_1_1_2; struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_3_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_3_2_2; } x_1_1_3; } x1; struct { struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_1_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_1_2_2; } x_2_1_1; struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_2_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_2_2_2; } x_2_1_2; struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_3_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_3_2_2; } x_2_1_3; } x2; struct { struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_1_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_1_2_2; } x_3_1_1; struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_2_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_2_2_2; } x_3_1_2; struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_3_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_3_2_2; } x_3_1_3; } x3; })arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 fraction:(double)arg3;
- (void)draw9PartImageWithSliceRects:(struct { struct { struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_1_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_1_2_2; } x_1_1_1; struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_2_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_2_2_2; } x_1_1_2; struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_3_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_3_2_2; } x_1_1_3; } x1; struct { struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_1_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_1_2_2; } x_2_1_1; struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_2_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_2_2_2; } x_2_1_2; struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_3_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_3_2_2; } x_2_1_3; } x2; struct { struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_1_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_1_2_2; } x_3_1_1; struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_2_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_2_2_2; } x_3_1_2; struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_3_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_3_2_2; } x_3_1_3; } x3; })arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 operation:(int)arg3 fraction:(double)arg4;
- (void)drawAsPatternInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 blendMode:(int)arg2 alpha:(double)arg3;
- (void)drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 blendMode:(int)arg2 alpha:(double)arg3;
- (double)duration;
- (void)encodeWithCoder:(id)arg1;
- (id)flattenedImageWithColor:(id)arg1;
- (bool)flipsForRightToLeftLayoutDirection;
- (bool)hasBaseline;
- (bool)hasContentInsets;
- (bool)hasMidline;
- (bool)hasPadding;
- (unsigned long long)hash;
- (id)imageAsset;
- (id)imageByAddingContentInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (id)imageByAddingPadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (id)imageByApplyingSymbolConfiguration:(id)arg1;
- (id)imageByPreparingForDisplay;
- (id)imageByPreparingThumbnailOfSize:(struct CGSize { double x1; double x2; })arg1;
- (id)imageFlippedForRightToLeftLayoutDirection;
- (long long)imageOrientation;
- (struct CGImage { }*)imageRef;
- (id)imageRendererFormat;
- (id)imageWithAlignmentRectInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (id)imageWithBaselineOffsetFromBottom:(double)arg1;
- (id)imageWithConfiguration:(id)arg1;
- (id)imageWithContentInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (id)imageWithHorizontallyFlippedOrientation;
- (id)imageWithMidlineOffsetFromCenter:(double)arg1;
- (id)imageWithPadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (id)imageWithRenderingMode:(long long)arg1;
- (id)imageWithSymbolConfiguration:(id)arg1;
- (id)imageWithTintColor:(id)arg1;
- (id)imageWithTintColor:(id)arg1 renderingMode:(long long)arg2;
- (id)imageWithoutBaseline;
- (id)imageWithoutMidline;
- (id)images;
- (id)init;
- (id)initWithCGImage:(struct CGImage { }*)arg1;
- (id)initWithCGImage:(struct CGImage { }*)arg1 imageOrientation:(long long)arg2;
- (id)initWithCGImage:(struct CGImage { }*)arg1 scale:(double)arg2 orientation:(long long)arg3;
- (id)initWithCIImage:(id)arg1;
- (id)initWithCIImage:(id)arg1 scale:(double)arg2 orientation:(long long)arg3;
- (id)initWithCoder:(id)arg1;
- (id)initWithContentsOfFile:(id)arg1;
- (id)initWithContentsOfFile:(id)arg1 cache:(bool)arg2;
- (id)initWithData:(id)arg1;
- (id)initWithData:(id)arg1 cache:(bool)arg2;
- (id)initWithData:(id)arg1 scale:(double)arg2;
- (id)initWithIOSurface:(struct __IOSurface { }*)arg1;
- (id)initWithItemProviderData:(id)arg1 typeIdentifier:(id)arg2 error:(id*)arg3;
- (struct __IOSurface { }*)ioSurface;
- (bool)isEqual:(id)arg1;
- (bool)isFromStatusBarImageProvider;
- (bool)isSymbolImage;
- (long long)leftCapWidth;
- (id)loadDataWithTypeIdentifier:(id)arg1 forItemProviderCompletionHandler:(id /* block */)arg2;
- (double)midlineOffsetFromCenter;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })padding;
- (id)patternColor;
- (struct CGSize { double x1; double x2; })preferredPresentationSizeForItemProvider;
- (void)prepareForDisplayWithCompletionHandler:(id /* block */)arg1;
- (void)prepareThumbnailOfSize:(struct CGSize { double x1; double x2; })arg1 completionHandler:(id /* block */)arg2;
- (long long)renderingMode;
- (id)resizableImageWithCapInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (id)resizableImageWithCapInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1 resizingMode:(long long)arg2;
- (long long)resizingMode;
- (double)scale;
- (void)setFlipsForRightToLeftLayoutDirection:(bool)arg1;
- (struct CGSize { double x1; double x2; })size;
- (id)stretchableImageWithLeftCapWidth:(long long)arg1 topCapHeight:(long long)arg2;
- (id)symbolConfiguration;
- (long long)topCapHeight;
- (id)traitCollection;
- (bool)writeToCPBitmapFile:(id)arg1 flags:(int)arg2;

// Image: /Developer/Library/PrivateFrameworks/DTDDISupport.framework/libViewDebuggerSupport.dylib

- (id)_imageResizedForDisplayInInspector;
- (id)fallback_debugHierarchyValueWithOutOptions:(id*)arg1 outError:(id*)arg2;

// Image: /System/Library/Frameworks/ContactsUI.framework/ContactsUI

+ (id)cnui_actionTypeForTransportType:(long long)arg1;
+ (id)cnui_carPlayUserActionSymbolImageForActionType:(id)arg1;
+ (id)cnui_imageNamed:(id)arg1;
+ (id)cnui_imageWithDataPreservingScale:(id)arg1;
+ (id)cnui_symbolImageForContactCardChevron;
+ (id)cnui_symbolImageForNavigationListChevron;
+ (id)cnui_symbolImageForTransportType:(long long)arg1 withColor:(id)arg2;
+ (id)cnui_symbolImageNamed:(id)arg1 scale:(long long)arg2 weight:(long long)arg3 withColor:(id)arg4 useFixedSize:(bool)arg5 compatibleWithTextStyle:(id)arg6;
+ (id)cnui_symbolImageNamed:(id)arg1 scale:(long long)arg2 withColor:(id)arg3 useFixedSize:(bool)arg4;
+ (id)cnui_symbolImageNamed:(id)arg1 scale:(long long)arg2 withColor:(id)arg3 useFixedSize:(bool)arg4 compatibleWithTextStyle:(id)arg5;
+ (id)cnui_templateImageNamed:(id)arg1 withTint:(id)arg2;
+ (id)cnui_tintedImageNamed:(id)arg1 withTint:(id)arg2;
+ (id)cnui_userActionOutlinedSymbolImageForActionType:(id)arg1 scale:(long long)arg2 withColor:(id)arg3;
+ (id)cnui_userActionSymbolImageForActionType:(id)arg1 scale:(long long)arg2 withColor:(id)arg3;
+ (id)cnui_userActionSymbolImageForActionType:(id)arg1 scale:(long long)arg2 withColor:(id)arg3 compatibleWithTextStyle:(id)arg4;

// Image: /System/Library/Frameworks/MapKit.framework/MapKit

+ (id)_mapkit_imageFromVKImage:(id)arg1;
+ (id)_mapkit_imageNamed:(id)arg1;
+ (id)_mapkit_imageNamed:(id)arg1 compatibleWithTraitCollection:(id)arg2;
+ (id)_mapkit_liveTransitIndicatorImageApplyingColorForStatus:(long long)arg1 darkMode:(bool)arg2;
+ (id)_mapkit_liveTransitIndicatorImageUsingDarkMode:(bool)arg1;
+ (id)_mapkit_transitArtworkImageWithDataSource:(id)arg1 size:(long long)arg2 scale:(double)arg3;
+ (id)_mapkit_transitArtworkImageWithDataSource:(id)arg1 size:(long long)arg2 scale:(double)arg3 nightMode:(bool)arg4;
+ (id)_mapkit_transitArtworkImageWithDataSource:(id)arg1 size:(long long)arg2 scale:(double)arg3 withWidthPaddingMultiple:(double)arg4;

- (id)_mapkit_dimmedImage;
- (id)_mapkit_horizontallyFlippedImage;
- (id)_mapkit_imageWithAlpha:(double)arg1;
- (id)_mapkit_templateImageWithTintColor:(id)arg1;
- (id)badgeImageToDisplayWithScreenScale:(double)arg1 nightMode:(bool)arg2;
- (id)imageToDisplayWithScreenScale:(double)arg1 nightMode:(bool)arg2;

// Image: /System/Library/PrivateFrameworks/PersonaUI.framework/PersonaUI

+ (id)pr_imageWithCGImage:(struct CGImage { }*)arg1;
+ (id)pr_imageWithCGImage:(struct CGImage { }*)arg1 cropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
+ (id)pr_imageWithCGImage:(struct CGImage { }*)arg1 size:(struct CGSize { double x1; double x2; })arg2 scale:(double)arg3;

- (id)pr_circleImageOfDiameter:(double)arg1 cropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)pr_circleImageWithCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGImage { }*)pr_imageRef;

// Image: /System/Library/PrivateFrameworks/TemplateKit.framework/TemplateKit

- (id)tlks_imageAutoFlippedForRTL:(bool)arg1 tintColor:(id)arg2;

@end
