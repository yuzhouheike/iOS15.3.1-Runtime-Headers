/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKPuckAnimator : NSObject {
    VKTimedAnimation * _animation;
    unsigned long long  _behavior;
    VKRunningCurve * _curve;
    <VKPuckAnimatorDelegate> * _delegate;
    struct Matrix<double, 3, 1> { 
        double _e[3]; 
    }  _lastProjectedPosition;
    VKPuckAnimatorLocationProjector * _locationProjector;
    long long  _pausedCount;
    const struct RouteOverlayCache { int (**x1)(); id x2; } * _routeOverlayCache;
    bool  _suspended;
    <VKPuckAnimatorTarget> * _target;
    double  _tracePlaybackSpeedMultiplier;
    double  _vehicleHeading;
}

@property (nonatomic) unsigned long long behavior;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{optional<std::pair<geo::Mercator3<double>' */ struct  currentSnappedSegment; /* unknown property attribute:  geo::Mercator3<double>>={Mercator3<double>=[3d]}{Mercator3<double>=[3d]}})B} */
@property (nonatomic) <VKPuckAnimatorDelegate> *delegate;
@property (nonatomic) /* Warning: unhandled struct encoding: '{Matrix<double' */ struct  lastProjectedPosition; /* unknown property attribute:  1>=[3d]} */
@property (nonatomic, retain) <VKPuckAnimatorTarget> *target;
@property (nonatomic) double tracePlaybackSpeedMultiplier;

- (id).cxx_construct;
- (void)_step;
- (unsigned long long)behavior;
- (struct optional<std::pair<geo::Mercator3<double>, geo::Mercator3<double>>> { union { BOOL x_1_1_1; struct pair<geo::Mercator3<double>, geo::Mercator3<double>> { struct Mercator3<double> { double x_1_3_1[3]; } x_2_2_1; struct Mercator3<double> { double x_2_3_1[3]; } x_2_2_2; } x_1_1_2; } x1; bool x2; })currentSnappedSegment;
- (void)dealloc;
- (id)delegate;
- (id)detailedDescription;
- (id)init;
- (struct Matrix<double, 3, 1> { double x1[3]; })lastProjectedPosition;
- (void)pause;
- (void)resume;
- (void)setBehavior:(unsigned long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setLastProjectedPosition:(struct Matrix<double, 3, 1> { double x1[3]; })arg1;
- (void)setRouteOverlayCache:(const struct RouteOverlayCache { int (**x1)(); id x2; }*)arg1;
- (void)setTarget:(id)arg1;
- (void)setTracePlaybackSpeedMultiplier:(double)arg1;
- (void)start;
- (void)stop;
- (id)target;
- (double)tracePlaybackSpeedMultiplier;
- (void)updateLocation:(id)arg1 routeMatch:(id)arg2;
- (void)updateVehicleHeading:(double)arg1;

@end
