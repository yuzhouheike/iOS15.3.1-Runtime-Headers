/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/WebCore.framework/WebCore
 */

@interface WebCoreNSURLSessionTaskTransactionMetrics : NSObject {
    struct NetworkLoadMetrics { 
        struct MonotonicTime { 
            double m_value; 
        } redirectStart; 
        struct MonotonicTime { 
            double m_value; 
        } fetchStart; 
        struct MonotonicTime { 
            double m_value; 
        } domainLookupStart; 
        struct MonotonicTime { 
            double m_value; 
        } domainLookupEnd; 
        struct MonotonicTime { 
            double m_value; 
        } connectStart; 
        struct MonotonicTime { 
            double m_value; 
        } secureConnectionStart; 
        struct MonotonicTime { 
            double m_value; 
        } connectEnd; 
        struct MonotonicTime { 
            double m_value; 
        } requestStart; 
        struct MonotonicTime { 
            double m_value; 
        } responseStart; 
        struct MonotonicTime { 
            double m_value; 
        } responseEnd; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } protocol; 
        unsigned short redirectCount; 
        bool complete; 
        bool cellular; 
        bool expensive; 
        bool constrained; 
        bool multipath; 
        bool isReusedConnection; 
        bool failsTAOCheck; 
        bool hasCrossOriginRedirect; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } remoteAddress; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } connectionIdentifier; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } tlsProtocol; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } tlsCipher; 
        unsigned char priority; 
        unsigned char privacyStance; 
        struct HTTPHeaderMap { 
            struct Vector<WebCore::HTTPHeaderMap::CommonHeader, 0, WTF::CrashOnOverflow, 6, WTF::FastMalloc> { 
                struct CommonHeader {} *m_buffer; 
                unsigned int m_capacity; 
                unsigned int m_size; 
            } m_commonHeaders; 
            struct Vector<WebCore::HTTPHeaderMap::UncommonHeader, 0, WTF::CrashOnOverflow, 0, WTF::FastMalloc> { 
                struct UncommonHeader {} *m_buffer; 
                unsigned int m_capacity; 
                unsigned int m_size; 
            } m_uncommonHeaders; 
        } requestHeaders; 
        unsigned long long requestHeaderBytesSent; 
        unsigned long long responseHeaderBytesReceived; 
        unsigned long long requestBodyBytesSent; 
        unsigned long long responseBodyBytesReceived; 
        unsigned long long responseBodyDecodedSize; 
    }  _metrics;
}

@property (readonly) int _privacyStance;
@property (getter=isCellular, readonly) bool cellular;
@property (readonly, copy) NSDate *connectEndDate;
@property (readonly, copy) NSDate *connectStartDate;
@property (getter=isConstrained, readonly) bool constrained;
@property (readonly, copy) NSDate *domainLookupEndDate;
@property (readonly, copy) NSDate *domainLookupStartDate;
@property (getter=isExpensive, readonly) bool expensive;
@property (readonly, copy) NSDate *fetchStartDate;
@property (getter=isMultipath, readonly) bool multipath;
@property (readonly, copy) NSString *networkProtocolName;
@property (readonly, copy) NSDate *requestStartDate;
@property (readonly, copy) NSDate *responseEndDate;
@property (readonly, copy) NSDate *responseStartDate;
@property (getter=isReusedConnection, readonly) bool reusedConnection;
@property (readonly, copy) NSDate *secureConnectionStartDate;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)_initWithMetrics:(const void*)arg1;
- (int)_privacyStance;
- (bool)cellular;
- (id)connectEndDate;
- (id)connectStartDate;
- (bool)constrained;
- (id)domainLookupEndDate;
- (id)domainLookupStartDate;
- (bool)expensive;
- (id)fetchStartDate;
- (bool)isReusedConnection;
- (bool)multipath;
- (id)networkProtocolName;
- (id)requestStartDate;
- (id)responseEndDate;
- (id)responseStartDate;
- (id)secureConnectionStartDate;

@end
